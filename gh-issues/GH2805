#!/usr/bin/env perl6
#t# skiptest
#u# https://github.com/rakudo/rakudo/issues/2805
#c# 2019-03-31 open, 2019-04-18 closed
#n# bug source: S/State_name_puzzle
#n# as of: Rakudo version 2019.03-40-g4ffb4082b built on MoarVM version 2019.03-31-g6c7810ce7
#n#
#n# bug first noticed 2019-03-15, but relevant Rakudo change could be earlier (as bug doesn't trigger every run)
#n# 2019-04-01 regression caused by:
#n#  https://github.com/MoarVM/MoarVM/commit/bc98cb9467ab2d5d408dff841f39ae8734a936a5
    
#`{{
    an intermittent two-part/two-pass bug related to 'spesh delay'?
   
    the actual bug:
      Off-by-one for upper end of range '$i ^..^ @s', goes one past end of array IFF in the context of a 'for' loop.
      This leads to '@pairs' incorrectly containing valid strings being paired with 'Any'
   
    conditions required to enable the bug:
      routine 'anastates' is called a 2nd (or 3rd) time
      both 'trigger A' and 'trigger B' are active
   
    conditions that disable the bug:
      if either 'trigger A' or 'trigger B' is disabled (and a corresponding 'work-around' A/B is used)
      MVM_SPESH_NODELAY=1 is set
    
    blin --custom-script gave kind of random answers, but this occurred twice, and the time-frame was right, significant?:
    (brackets the NQP bump)
    7bd3b3a0a8a3c1faaef602d2d3fe1e619e4ef640 7b863b72aac89ddee02826266e28685b12b1f74f f09156240a52b34bc356ef715bd955c8f4378cb4
   
    additionally:
      the list of 'states' as given enables the bug, adding or deleting a few will 
      sometimes disable the bug (or just make it trigger less frequently?)
      failure rate increases with longer time between runs (distribution over 100 runs):
   
        without 'sleep'
         27 fails after 2nd call
         73 doesn't fail
   
        with 'sleep 3'
         28 fails after 2nd call
          8 fails after 3rd call
         64 doesn't fail
   
        with 'sleep 30'
         49 fails after 2nd call
         11 fails after 3rd call
         40 doesn't fail
}}

my @states = < A B C D E F G H I K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o 0 1 2 3 4 5 6 7 
A1 B1 C1 D1 E1 F1 G1 H1 I1 K1 L1 M1 N1 O1 P1 Q1 R1 S1 T1 U1 V1 W1 X1 Y1 Z1 a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 k1 l1 m1 n1 o1 01 11 21 31 41 51 61 71 
>;

#for (1..20) {say "RUN $_"; my @x = anastates @states; sleep 3; }
print '0'; .say for my @res0 = anastates @states; sleep 3;
print '1'; .say for my @res1 = anastates @states; sleep 3;
print '2'; .say for my @res2 = anastates @states; sleep 3;
print '3'; .say for my @res3 = anastates @states; sleep 3;
print '4'; .say for my @res4 = anastates @states; sleep 3;
print '5'; .say for my @res5 = anastates @states; sleep 3;
print '6'; .say for my @res6 = anastates @states; sleep 3;
print '7'; .say for my @res7 = anastates @states; sleep 3;
print '8'; .say for my @res8 = anastates @states; sleep 3;
print '9'; .say for my @res9 = anastates @states; sleep 3;
print "\n";

sub anastates (@s) {
    my @pairs;
    for ^@s -> $i {
	   #for $i ^..  @s.end -> $j {  # work-around A1
	   #for $i ^..^ +@s -> $j {     # work-around A2
 	   #my $range = $i ^..^ @s;     # work-around A3.1
 	   #for $range -> $j {          # work-around A3.2
	    for $i ^..^ @s -> $j {      # trigger A
            die "\nBUG" if ! defined @s[$j]; # just bail when $j doesn't subscript a valid location in @s
	        @pairs.push: [ @s[$i], @s[$j] ];
	    }
    }

    # this line generates warnings (Use of uninitialized value of type Any in string context) when @pairs contains 'Any')
    my $equivs = hash @pairs.classify: *.lc.comb.sort.join; 

    gather for $equivs.values -> @c {
	for ^@c -> $i {
	   #for $i ^.. @c.end {         # work-around B1
	   #for $i ^..^ +@c {           # work-around B2
	    for $i ^..^ @c {            # trigger B
            # this code not relevant 
	    }
	}
    }
}

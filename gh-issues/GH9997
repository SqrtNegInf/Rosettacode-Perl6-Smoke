#!/usr/bin/env perl6
#t# skiptest
#u# https://github.com/rakudo/rakudo/issues/xxxx
#c# 2021-03-06 not yet submitted as issue [ and never got around to it :-( ]
#n# 2021-03-10 lizmat++ commit 722c2c9792 restores previous behavior of deepmap, from roast:
#n# is ((0,1),(2,3)).deepmap(* + 1).raku, '($(1, 2), $(3, 4))', 'did we get sublists in containers';            
#n# bug source: http://rosettacode.org/wiki/Monads/List_monad#Raku
#n# first seen: Rakudo version v2021.02.1-28-gceac52170 built on MoarVM version 2021.02-3-g4ae157c33.
#n# bisect: https://gist.github.com/d2b7deb4bb20bd3c0ab07c6e9a0fdd87 ==> commit 412d770
#n# maybe fixing this will help 'B/Brace_expansion'? [no dice!]

my $a = ((1,2),(3,4)); say join(':',$a), ' vs ', $a.join: ':'; # differ 1 2 3 4 vs 1 2:3 4 
my @a = ((1,2),(3,4)); say join(':',@a), ' vs ', @a.join: ':'; # same   1 2:3 4 vs 1 2:3 4

# nub of the routines from Rosetta Code task http://rosettacode.org/wiki/Monads/List_monad#Raku
multi woof (@list, &code) { @list.map: &code };
multi woof ($item, &code) { $item.&code };      # this is the problematic item
sub   meow ($int)         { (1, 0) }

# minimum to demonstrate the bug-fix
say join ':', ((0,1),(2,3))>>.&(*+1);
say join ':', $a>>.&(*+1);
#exit;

# minimum demostration similar to RC task
my $x = ((0,1),(2,3))».&woof(*+1);
say 'x: '; dd $x;
say 'y: '; dd ((0,1),(2,3))».&woof(*+1);
exit;

say '0: ', ( (0,1),(2,3) )».&woof(*+1).join: ':';          # ok (was always/still is)
say '1: ', join ':', $x;                                   # ok (was always/still is)
say '2: ', join ':',         ( (0,1),(2,3) )».&woof(*+1);  # prior results also bad, but different: 1 2:3 4
say '3: ', join ':',(my $y = ( (0,1),(2,3)))».&woof(*+1);  # prior results ok
say '4: ', join ':', my $z = ( (0,1),(2,3) )».&woof(*+1);  # prior results ok
exit;

#`{ results with commit  722c2c9792:
1 2 3 4 vs 1 2:3 4
1 2:3 4 vs 1 2:3 4
a:
List $x = $($(1, 2), $(3, 4))
b:
($(1, 2), $(3, 4))
c:
($(1, 2), $(3, 4))
0: 1 2:3 4
1: 1 2 3 4
2: 1 2:3 4
3: 1 2:3 4
4: 1 2 3 4
}

# There was a change with the code labelled A2 below starting around v2021.02.1-28-gceac52170:
#  A1, B1 show correct results of join() and join operating on a list
#  A2 previously gave the desired output, but was actually 'wrong' (inconsistent with A1)
#  B2 gives the desired (and consistent) result in all versions of Raku
#  B3, B4 model how A2 is failing: somewhere in the chain the list gets flattened
# The bug only shows up when hyper is involved AND not working on intermediate variable?
# Executive summary: A2 code was broken before, and now is broken in a different way

dd my $foo = (^2).&woof(*+0).&woof(&meow)».&woof(*+0);
say 'A1 join()  as expected: ' ~ join ':', $foo;
say 'B1 .join   as expected: ' ~ $foo.join: ':';
say 'A2 join() NOT expected: ' ~ join ':', (^2).&woof(*+0).&woof(&meow)».&woof(*+0);      # original (previously gave same output as B1/B2)
say 'B2 .join   as expected: ' ~ (^2).&woof(*+0).&woof(&meow)».&woof(*+0).join: ':';      # method-chaining form gives proper output
say 'B3 .join  acts like A2: ' ~ (^2).&woof(*+0).&woof(&meow).flat».&woof(*+0).join: ':';
say 'B4 .join  acts like A2: ' ~ (^2).&woof(*+0).&woof(&meow)».&woof(*+0).flat.join: ':';

#`{
List $foo = $((1, 0), (1, 0))
A1 join()  as expected: "1 0 1 0"
B1 .join   as expected: "1 0:1 0"
A2 join() NOT expected: "1:0:1:0"
B2 .join   as expected: "1 0:1 0"
B3 .join  acts like A2: "1:0:1:0"
B4 .join  acts like A2: "1:0:1:0"
}

exit;
say '';

(^2).&woof(*+0).&woof(&meow)».&woof(*+0).raku.say; say '';
my @res1 = join "\n", (^2).&woof(* + 3).&woof(&meow).».&woof(*.base: 2);     # original
my @res2 = (^2).&woof(* + 3).&woof(&meow).».&woof(*.base: 2).join: "\n";     # needed since v2021.02.1-28-gceac52170
my @res3 = (^2).&woof(* + 3).&woof(&meow).flat».&woof(*.base: 2).join: "\n"; # on HEAD, fails like original
exit;

use Test;
my $ref = "1 0\n1 0";
is @res1.join("\n"), $ref;
is @res2.join("\n"), $ref;
is @res3.join("\n"), $ref;

#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Fast_Fourier_transform
#c# 2017-04-18 <RC
#m# MOAR: OK
#j#  JVM: OK

# Works with: rakudo 2015-12

sub fft {
    return @_ if @_ == 1;
    my @evn = fft( @_[0, 2 ... *] );
    my @odd = fft( @_[1, 3 ... *] ) Z*
    map &cis, (0, -tau / @_ ... *);
    return flat @evn »+« @odd, @evn »-« @odd;
}
 
my @res1.push: $_ for fft <1 1 1 1 0 0 0 0>;
.say for @res1;

# For the fun of it, here is a purely functional version:

sub fft1 {
    @_ == 1 ?? @_ !!
        fft1( @_[0, 2 ... *] ) «+»
        (<1 -1> X* (fft1( @_[1,3...*] ) Z* map &cis, (0,-τ/@_...*)))
}

my @res2.push: $_ for fft <1 1 1 1 0 0 0 0>;

my $ref = qq:to/END/;
4+0i
1-2.41421356237309i
0+0i
1-0.414213562373095i
0+0i
1+0.414213562373095i
0+0i
1+2.41421356237309i
END

use Test;
#my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is @res1.join("\n"), chomp $ref;
is @res2.join("\n"), chomp $ref;

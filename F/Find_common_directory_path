#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Find_common_directory_path
#c# 2016-05-04 <>RC, 2018-05-21 <RC
#m# MOAR: OK
#j#  JVM: OK

my $sep = '/';
my @dirs = </home/user1/tmp/coverage/test
            /home/user1/tmp/covert/operator
            /home/user1/tmp/coven/members>;

my @comps = @dirs.map: { [ .comb(/ $sep [ <!before $sep> . ]* /) ] }; 

my $prefix = '';

while all(@comps[*]»[0]) eq @comps[0][0] {
    $prefix ~= @comps[0][0] // last;
    @comps».shift;
}

say "The longest common path is $prefix";
use Test;
is $prefix, '/home/user1/tmp';

#Or here's another factoring, that focuses on building the result with cumulative sequences and getting the solution with `first`:

sub is_common_prefix { so $^prefix eq all(@dirs).substr(0, $prefix.chars) }

say 'The longest common path is ' ~ my $result1 = ([\~] @dirs.comb(/ $sep [ <!before $sep> . ]* /)).reverse.first: &is_common_prefix;
is $result1, '/home/user1/tmp';

# If you'd prefer a pure FP solution without side effects, you can use this:
my $sepp := '/';
my @dirss := </home/user1/tmp/coverage/test
             /home/user1/tmp/covert/operator
             /home/user1/tmp/coven/members>;

@comps = @dirss.map: { [ .comb(/ $sepp [ <!before $sepp> . ]* /) ] };

my @result2 = 
    gather for 0..* -> $column {
        last unless all(@comps[*]»[$column]) eq @comps[0][$column];
        take @comps[0][$column] // last;
    }

say 'The longest common path is ' ~ @result2.join;
is @result2.join, '/home/user1/tmp';

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Factorions
#c# 2019-08-12 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# try more bases (note results for 18)

my @res;

constant @f = 1, |[\×] 1..*;

constant $limit = 42_000; # 1_500_000;

for 9 .. 12 -> $b {

    @res.push: "\nFactorions in base $b:";

    @res.push: "$_ " if $_ == @f[$_] for ^$b;

    (1 .. $limit div $b).map: -> $i {
        my $sum;
        my $prod = $i × $b;

        for $i.polymod($b xx *) {
            $sum += @f[$_];
            $sum = 0 and last if $sum > $prod
        }

        next if $sum == 0;

        @res.push: "{$prod + $_} " and last if $sum + @f[$_] == $prod + $_ for ^$b;
    }
}

.say for @res;

my $ref = q:to/END/;

Factorions in base 9:
1 
2 
41282 

Factorions in base 10:
1 
2 
145 
40585 

Factorions in base 11:
1 
2 
26 
48 
40472 

Factorions in base 12:
1 
2 
END

use Test;
is @res.join("\n"), chomp $ref;

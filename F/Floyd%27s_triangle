#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Benford's_law
#c# 2015-12-09 <RC
#m# MOAR: OK
#j#  JVM: OK

constant @floyd1 = (1..*).rotor(1..*);

constant @floyd2 = gather for 1..* -> $s { take [++$ xx $s] }
 
sub say-floyd1($n) {
    my @formats = @floyd1[$n-1].map: {"%{.chars}s"}
 
    for @floyd2[^$n] -> @i {
        say ~(@i Z @formats).map: -> ($i, $f) { $i.fmt($f) }
    }
}
 
sub say-floyd2($n) {
    my @formats = @floyd2[$n-1].map: {"%{.chars}s"}
 
    for @floyd2[^$n] -> @i {
        say ~(@i Z @formats).map: -> ($i, $f) { $i.fmt($f) }
    }
}
 
#say-floyd1 5;
#say-floyd2 5;
say-floyd1 14;
say-floyd2 14;

use Test;
for 1..14 -> $i {
is @floyd1[$i], @floyd2[$i];
}

#`{

 1 
 2  3 
 4  5  6 
 7  8  9 10 
11 12 13 14 15 
 1 
 2  3 
 4  5  6 
 7  8  9 10 
11 12 13 14 15 
16 17 18 19 20 21 
22 23 24 25 26 27 28 
29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44  45 
46 47 48 49 50 51 52 53  54  55 
56 57 58 59 60 61 62 63  64  65  66 
67 68 69 70 71 72 73 74  75  76  77  78 
79 80 81 82 83 84 85 86  87  88  89  90  91 
92 93 94 95 96 97 98 99 100 101 102 103 104 105
}

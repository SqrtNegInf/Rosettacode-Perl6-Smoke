m 2021-03-16T23:02:31Z ijchain {<user____1> FAKE ENTRY 1 is xcircuit by Tim Edwards. It is a custom wish shell running xcircuit.tcl}
m 2021-03-16T23:03:24Z {} {jima has left}
m 2021-03-16T23:03:32Z ijchain {*** tech_exorcist leaves}
m 2021-03-16T23:08:45Z ijchain {*** puremourning joins}
m 2021-03-16T23:13:56Z suchenwi {/me zzz}
m 2021-03-16T23:16:26Z ijchain {*** puremourning leaves}
m 2021-03-16T23:27:29Z {} {suchenwi has left}
m 2021-03-16T23:31:25Z ijchain {*** TCZ joins}
m 2021-03-16T23:57:58Z ijchain {*** ischain leaves}
m 2021-03-17T00:02:15Z ijchain {*** TCZ leaves}
m 2021-03-17T00:04:26Z {} {stevel has left}
m 2021-03-17T00:12:31Z ijchain {<user____1> FAKE ENTRY 2 is xcircuit by Tim Edwards. It is a custom wish shell running xcircuit.tcl}
m 2021-03-17T00:16:15Z ijchain {*** SomeHacker leaves}
m 2021-03-17T00:19:34Z ijchain {*** SomeHacker joins}
m 2021-03-18T07:44:56Z {} {kevin_walzer has become available}
m 2021-03-18T07:46:45Z ijchain {*** absc joins}
m 2021-03-18T07:50:42Z ijchain {*** luser978 joins}
m 2021-03-18T07:51:03Z ijchain {*** luser977 leaves}
m 2021-03-18T08:02:21Z {} {kevin_walzer has left}
m 2021-03-18T08:18:25Z ijchain {*** anticrisis leaves}
m 2021-03-18T08:21:34Z arjen {Elections done - surprising outcome ...}
m 2021-03-18T08:21:49Z suchenwi {Rutte won?}
m 2021-03-18T08:22:26Z arjen {Yes, that was no surprise, but the second party is D66 now, liberal democrats, instead of PVV, Wilders' party}
m 2021-03-18T08:22:42Z arjen {And the left-wing parties are diminished}
m 2021-03-18T08:24:32Z ijchain {<yukonbob> tok = Tcl_CreateObjCommand(...); the command token is good for the life of the command  for things like Tcl_GetInfoFromToken(tok, &cmdinfo);}
m 2021-03-18T08:26:08Z ijchain {<yukonbob> question -- how can one *know* the life of the command associated w/ the token? Will the next new command fill in as a same-signature command like a file-handle will fill in an fd? Or is there some epoch component that makes it impossible, or some other property that makes it Very Unlikely ?}
m 2021-03-18T08:32:08Z arjen brb
m 2021-03-18T08:32:20Z {} {arjen has left}
m 2021-03-18T08:38:46Z ijchain {«aku» moin}
m 2021-03-18T08:39:34Z ijchain {<yukonbob> hey aku}
m 2021-03-18T08:39:49Z ijchain {«aku» @stevel - Did you see @q3cpma's question about wiki registration ?}
m 2021-03-18T08:40:03Z ijchain {«aku» hey yukon}
m 2021-03-18T08:40:17Z ijchain {*** puremouron joins}
m 2021-03-18T08:40:27Z stevel {nope - where?}
m 2021-03-18T08:41:24Z ijchain {«aku» Here in the history ... To quote}
m 2021-03-18T08:41:24Z ijchain {«aku» > Sorry for asking again one last time, but is the registering mecanism of the wiki supposed to be not working? Temporarily? I'm really lost here}
m 2021-03-18T08:41:39Z stevel {where was this asked?}
m 2021-03-18T08:41:49Z ijchain {«aku» I have no other info. Here in the chat}
m 2021-03-18T08:41:59Z stevel {I don't have time to read chat logs ..}
m 2021-03-18T08:42:27Z ijchain {«aku» Good busy, or bad busy ?}
m 2021-03-18T08:42:34Z stevel {but yes, it is broken due to spammers trying to register ... unless we now have thousands of indian and russion Tcl programmers wanting to join}
m 2021-03-18T08:42:38Z stevel {good busy}
m 2021-03-18T08:43:13Z ijchain {«aku» Is there a person I should direct q3cpma direct to, who can register him ?}
m 2021-03-18T08:43:16Z stevel {Jos and I have designed a new registration facility, Jos has programmed it and it's sitting on my todo list to test and go live}
m 2021-03-18T08:43:36Z stevel {I'll try to take a look over the weekend}
m 2021-03-18T08:44:08Z ijchain {«aku» thank you. I will tell him the above when he appears here. Don't know his TZ.}
m 2021-03-18T08:44:14Z stevel {I presume s/he will see this conversation in the meantime}
m 2021-03-18T08:44:40Z ijchain {* yukonbob looks at struct Command{}, is heartened to see reference to cmdEpoch...}
m 2021-03-18T08:46:31Z ijchain {«aku» @stevel - yes, I hope as well}
m 2021-03-18T08:50:02Z ijchain {*** luser978 leaves}
m 2021-03-18T08:59:34Z ijchain {*** karakedi joins}
m 2021-03-18T09:04:49Z {} {arjen has become available}
m 2021-03-18T09:05:10Z arjen {/me back}
m 2021-03-18T09:23:05Z ijchain {*** luser977 joins}
m 2021-03-18T09:27:23Z ijchain {*** luser977 leaves}
m 2021-03-18T09:33:02Z {} {dburns has become available}
m 2021-03-18T09:45:34Z {} {kevin_walzer has become available}
m 2021-03-18T09:57:08Z {} {dburns has left}
m 2021-03-18T10:00:52Z ijchain {*** luser977 joins}
m 2021-03-18T10:03:22Z ijchain {*** luser977 leaves}
m 2021-03-18T10:03:29Z ijchain {*** luser978 joins}
m 2021-03-18T10:08:57Z ijchain {*** xharx__ joins}
m 2021-03-18T10:09:20Z ijchain {*** xharx_ leaves}
m 2021-03-18T10:14:01Z {} {kevin_walzer has left}
m 2021-03-18T10:17:10Z ijchain {*** luser977 joins}
m 2021-03-18T10:17:11Z ijchain {*** luser978 leaves}
m 2021-03-18T10:22:15Z ijchain {*** luser977 leaves}
m 2021-03-18T10:22:20Z ijchain {*** luser978 joins}
m 2021-03-18T10:31:55Z ijchain {*** Zelouille joins}
m 2021-03-18T10:35:22Z ijchain {«apn» @yukonbob, my belief is use of the command token is only safe from the component that "owns" the command since that can register a delete callback to inform any internal pieces that have interest in that token that it is gone. I'm not sure it is safe to use from "outside" that component for the reasons you mention. But I could be wrong ð}
m 2021-03-18T10:39:09Z ijchain {«apn» And it is not clear to me cmdEpoch helps}
m 2021-03-18T10:41:15Z ijchain {*** luser978 leaves}
m 2021-03-18T10:41:27Z ijchain {*** luser977 joins}
m 2021-03-18T10:44:48Z ijchain {*** ischain leaves}
m 2021-03-18T11:13:05Z {} {dburns has become available}
m 2021-03-18T11:14:54Z ijchain {*** ischain leaves}
m 2021-03-18T11:19:38Z ijchain {*** nuclightq_ leaves}
m 2021-03-18T11:27:16Z {} {emiliano has become available}
m 2021-03-18T11:29:35Z ijchain {*** xharx__ leaves}
m 2021-03-18T11:30:04Z ijchain {*** xharx__ joins}
m 2021-03-18T11:44:59Z ijchain {*** ischain leaves}
m 2021-03-18T11:46:22Z {} {kevin_walzer has become available}
m 2021-03-18T11:56:32Z ijchain {*** tech_exorcist joins}
m 2021-03-18T11:57:35Z ijchain {*** xharx__ leaves}
m 2021-03-18T11:58:13Z ijchain {*** xharx__ joins}
m 2021-03-18T11:59:05Z ijchain {*** xharx__ leaves}
m 2021-03-18T12:04:32Z ijchain {*** tech_exorcist leaves}
m 2021-03-18T12:04:45Z ijchain {*** tech_exorcist joins}
m 2021-03-18T12:10:50Z {} {kevin_walzer has left}
m 2021-03-18T12:11:26Z {} {kevin_walzer has become available}
m 2021-03-18T12:13:00Z {} {dburns has left}
m 2021-03-18T12:15:04Z ijchain {*** ischain leaves}
m 2021-03-18T12:34:15Z {} {stu has become available}
m 2021-03-18T12:36:26Z {} {stu has left}
m 2021-03-18T12:45:09Z ijchain {*** ischain leaves}
m 2021-03-18T12:50:24Z ijchain {*** nuclightq joins}
m 2021-03-18T12:54:45Z ijchain {*** sebres joins}
m 2021-03-18T12:56:48Z ijchain {*** sebres leaves}
m 2021-03-18T13:08:25Z {} {teo1 has left}
m 2021-03-18T13:09:12Z {} {teo1 has become available}
m 2021-03-18T13:15:14Z ijchain {*** ischain leaves}
m 2021-03-18T13:42:33Z {} {dburns has become available}
m 2021-03-18T13:45:19Z ijchain {*** ischain leaves}
m 2021-03-18T14:15:24Z ijchain {*** ischain leaves}
m 2021-03-18T14:27:40Z ijchain {*** Thedarkb leaves}
m 2021-03-18T14:30:52Z {} {stevel has left}
m 2021-03-18T14:32:23Z ijchain {*** TOB_CyxoB joins}
m 2021-03-18T14:32:23Z {} {kevin_walzer has left}
m 2021-03-18T14:45:29Z ijchain {*** ischain leaves}
m 2021-03-18T14:47:31Z {} {kevin_walzer has become available}
m 2021-03-18T14:50:36Z ijchain {*** LambdaComplex leaves}
m 2021-03-18T14:51:23Z ijchain {*** tabakhase leaves}
m 2021-03-18T14:55:38Z ijchain {*** tabakhase joins}
m 2021-03-18T14:56:06Z ijchain {*** Zarutian_HTC joins}
m 2021-03-18T14:58:41Z ijchain {*** aliss joins}
m 2021-03-18T15:04:14Z ijchain {*** LambdaComplex joins}
m 2021-03-18T15:08:15Z ijchain {*** Bradipo joins}
m 2021-03-18T15:15:35Z ijchain {*** ischain leaves}
m 2021-03-18T15:31:53Z ijchain {*** Buster joins}
m 2021-03-18T15:32:44Z {} {kevin_walzer has left}
m 2021-03-18T15:38:22Z ijchain {*** xharx joins}
m 2021-03-18T15:43:13Z ijchain {*** xharx leaves}
m 2021-03-18T15:44:18Z ijchain {*** xharx joins}
m 2021-03-18T15:45:28Z {} {kevin_walzer has become available}
m 2021-03-18T15:45:40Z ijchain {*** ischain leaves}
m 2021-03-18T15:46:06Z ijchain {*** xharx leaves}
m 2021-03-18T15:53:26Z ijchain {*** user____1 joins}
m 2021-03-18T15:54:04Z ijchain {<user____1> Hi. Under what circumstances would TKCON be defined on a windows or linux cli when launching wish? I found a program whose startup seems to check for $TKCON}
m 2021-03-18T15:54:25Z ijchain {<user____1> The program is xcircuit by Tim Edwards. It is a custom wish shell running xcircuit.tcl}
m 2021-03-18T15:54:51Z ijchain {<user____1> The program checking for TKCON is the bash program which starts the program itself, i.e. the executable from the point of view of the user.}
m 2021-03-18T15:55:46Z suchenwi {tkcon is an optional feature-enriched console for wish.}
m 2021-03-18T15:56:27Z ijchain {<user____1> I know what it is but under what circumstances, if any, would wish check for that? I think never, in a vanilla wish context? Correct?}
m 2021-03-18T15:56:40Z ijchain {* user____1 loves undocumented features in other people's sources}
m 2021-03-18T15:59:12Z ijchain {<user____1> Next: in an ~/.Xdefaults file on linux, do i have to spell the program name camel cased or lowercase as the command is?}
m 2021-03-18T15:59:44Z ijchain {<thrig> unix filesystems are usually case sensitive}
m 2021-03-18T16:02:05Z ijchain {<iv4nshm4k0v> user____1: Try using xwininfo(1) on the window.  The X convention is to use a leading upper case letter (not necessarily CamelCase proper) for the /class/ name, and a leading lower case one for /instance/ name.  For example, if you've installed a new version of xterm(1) on your system as xterm-new, then its instance name would be xterm-new, while its class name would still be XTerm.}
m 2021-03-18T16:03:01Z ijchain {<user____1> The program ignores my resource setting even after manual xrdb -merge ~/.Xdefault}
m 2021-03-18T16:03:05Z ijchain {<user____1> +s}
m 2021-03-18T16:03:09Z ijchain {<user____1> It looks like a bug}
m 2021-03-18T16:03:39Z ijchain {<user____1> thrig: yes but the xrdb db might not be. In that it requires capitalized things in unexpected places iirc.}
m 2021-03-18T16:05:37Z ijchain {<user____1> Tim Edwards neutered even wish's -geometry option on the cli. Argh.}
m 2021-03-18T16:05:42Z ijchain {<iv4nshm4k0v> user____1: JFTR, ~/.Xdefaults does not need to be loaded into Xrdb; X applications just read that file directly.  It's ~/.Xresources that is /not/ read by X applications and is instead ought to be so loaded.}
m 2021-03-18T16:05:46Z ijchain {<user____1> Okay, program bug, not related to wish.}
m 2021-03-18T16:05:57Z ijchain {«dkf» Xrdb names are obscure in the extreme}
m 2021-03-18T16:06:04Z ijchain {<user____1> iv4nshm4k0v: in theory. I tried to load it using -override anyway}
m 2021-03-18T16:06:47Z ijchain {«dkf» Tk only includes a partial implementation of the naming scheme}
m 2021-03-18T16:06:52Z ijchain {<user____1> So, I rest my case. Anyway xcircuit is a nice circuit (and other) drawing program with high quality PS output. I use it a lot, been using it for like 15 years.}
m 2021-03-18T16:06:59Z ijchain {«dkf» It’s most of the sane bits ð}
m 2021-03-18T16:07:14Z ijchain {<user____1> dkf therefore a tiny subset then >:-)}
m 2021-03-18T16:07:26Z ijchain {«dkf» exactly}
m 2021-03-18T16:07:35Z ijchain {<iv4nshm4k0v> dkf: I think Xt-based applications mostly support Editres protocol.  When the documentation was lacking, I've just used editres(1) to discover what I need.}
m 2021-03-18T16:07:59Z ijchain {<user____1> I am amazed Tim E. is not on here, he wrote quite a lot of tcl code for that xcircuit program.}
m 2021-03-18T16:08:21Z ijchain {<user____1> dkf I won't bother, I assume someone will tell him some day to fix it.}
m 2021-03-18T16:08:34Z ijchain {<user____1> The real program is xcircuit.tcl and I could edit that at will. Won't.}
m 2021-03-18T16:08:56Z ijchain {<iv4nshm4k0v> user____1: I don't recall .Xdefaults vs. .Xresources ever working /not/ like that for me.}
m 2021-03-18T16:08:57Z ijchain {<user____1> Starting maximized with no wm handle every time is a bit annoying but I have a quick macro to fix it now.}
m 2021-03-18T16:09:17Z ijchain {<user____1> iv4nshm4k0v: hm? could you please rephrase?}
m 2021-03-18T16:09:55Z ijchain {<user____1> the installed program on linux has these things: /usr/share/xcircuit/boot_xcircuit.tcl /usr/share/xcircuit/xcircuit.tcl}
m 2021-03-18T16:10:33Z {} {kevin_walzer has left}
m 2021-03-18T16:10:38Z ijchain {«dkf» It’s a very long time since I remembered all the details of the xrdb stuff. I remember that the data is _actually_ stored in an X property of the root window.}
m 2021-03-18T16:12:21Z ijchain {<user____1> wm title $name also sets the resource program property name no?}
m 2021-03-18T16:12:42Z ijchain {<iv4nshm4k0v> dkf: Yep.  This way, the ~/.Xresources file data loaded from whenever your X session is started on is used by the X applications regardless of where /they/ are started on.}
m 2021-03-18T16:13:08Z {} {kevin_walzer has become available}
m 2021-03-18T16:17:08Z ijchain {*** Zarutian_HTC leaves}
m 2021-03-18T16:17:12Z ijchain {<user____1> I can't find code in the tcl side which maximizes the window, I think it is in the C-side, the modified wish startup code.}
m 2021-03-18T16:17:21Z ijchain {<user____1> Anyway, enough of this.}
m 2021-03-18T16:17:44Z ijchain {<user____1> The xrdb app name is XCircuit but setting props for that did not help either.}
m 2021-03-18T16:18:49Z ijchain {<user____1> iv4nshm4k0v: your assertions are true assuming a X11 session restart occurred in between edits of the Xresources. When that is not the case (I last rebooted about 2 months ago), one needs manual xrdb -override $res}
m 2021-03-18T16:19:20Z ijchain {<user____1> Also finding the dpy etc names requires extra effort if the application changes title/name after starting.}
m 2021-03-18T16:19:26Z ijchain {<user____1> Which is the case here.}
m 2021-03-18T16:27:48Z ijchain {*** Zarutian_HTC joins}
m 2021-03-18T16:32:22Z {} {emiliano has left}
m 2021-03-18T16:32:45Z ijchain {*** greycat joins}
m 2021-03-18T16:33:00Z {} {kevin_walzer has left}
m 2021-03-18T16:33:54Z ijchain {*** nektomk leaves}
m 2021-03-18T16:41:34Z ijchain {*** nektomk joins}
m 2021-03-18T16:45:07Z ijchain {*** nektomk2 joins}
m 2021-03-18T16:45:07Z ijchain {*** nektomk leaves}
m 2021-03-18T16:47:50Z ijchain {«dkf» Changing the title shouldn’t matter too much.}
m 2021-03-18T16:48:16Z ijchain {«dkf» But changing the name or class is uncommon in the extreme}
m 2021-03-18T16:48:44Z ijchain {«dkf» That said… the name/class quite possibly isn’t what people think it is}
m 2021-03-18T16:48:49Z ijchain {*** MIF leaves}
m 2021-03-18T16:49:18Z {} {kevin_walzer has become available}
m 2021-03-18T16:54:27Z ijchain {*** MIF joins}
m 2021-03-18T16:55:08Z ijchain {<iv4nshm4k0v> user____1: That's correct, but that's precisely the difference between ~/.Xresources vs. ~/.Xdefaults: changes to the latter are effective immediately.  (For any newly started X applications, that is.)}
m 2021-03-18T16:55:22Z ijchain {<iv4nshm4k0v> dkf: Specifically?}
m 2021-03-18T17:00:51Z {} {stu has become available}
m 2021-03-18T17:02:27Z ijchain {*** cousteau joins}
m 2021-03-18T17:04:45Z ijchain {*** Guest73106` joins}
m 2021-03-18T17:05:27Z ijchain {<iv4nshm4k0v> Some years back I've clarified the few bits regarding X resources near the top of the Emacs etc/PROBLEMS file.  As it happens, they're still there (e. g., http://sources.debian.org/data/main/e/emacs/1:27.1+1-3/etc/PROBLEMS .)}
m 2021-03-18T17:05:27Z ijchain {<cousteau> I did it!  I managed to successfully break the profiler package with a testcase that consistently fails.}
m 2021-03-18T17:05:45Z ijchain {<cousteau> As someone suggested here, it seems to choke on certain recursive functions}
m 2021-03-18T17:07:39Z ijchain {*** Guest73106 leaves}
m 2021-03-18T17:08:09Z ijchain {*** Guest73106` is now known as Guest73106}
m 2021-03-18T17:08:52Z {} {kevin_walzer has left}
m 2021-03-18T17:10:14Z ijchain {<cousteau> Specifically, it does things I don't quite understand on normal recursive functions (functions that call themselves), but it goes absolutely nuts on "indirectly recursive functions" (A calls B, B calls A)}
m 2021-03-18T17:11:04Z ijchain {<cousteau> As a result, totalRuntime - descendantTime may be negative}
m 2021-03-18T17:11:29Z ijchain {<cousteau> (I was using totalRuntime - descendantTime to calculate the exclusive time, since it is not provided directly)}
m 2021-03-18T17:11:31Z ijchain {<user____1> a calls b, b calls a sounds like an eternal loop?}
m 2021-03-18T17:11:56Z ijchain {<cousteau> only if you don't tell them to stop at some point}
m 2021-03-18T17:12:03Z ijchain {<thrig> recursion is fine, stack space and exit condition permitting}
m 2021-03-18T17:12:18Z ijchain {<user____1> tail-calling a vs b is evil.}
m 2021-03-18T17:12:24Z ijchain {<user____1> i.e. each}
m 2021-03-18T17:12:28Z suchenwi {Every recursive function, direct or indirect, should know when to stop :)}
m 2021-03-18T17:12:30Z ijchain {<user____1> look, no stack growth}
m 2021-03-18T17:12:56Z ijchain {<user____1> suchenwi but the stopping condition is not decidable in most programming languages!}
m 2021-03-18T17:13:45Z ijchain {<cousteau> anyway, my point is, Tcllib's profiler chokes on recursive functions.  How I made the function and whether it could be optimized is irrelevant.}
m 2021-03-18T17:14:03Z ijchain {<rkeene> Have you tried optimizing it more ?}
m 2021-03-18T17:14:46Z ijchain {<cousteau> (if the code I wanted to run the profiler on were already optimized I wouldn't need to profile it in the first place; of course the code I'm running it on can be written better, that's the point=}
m 2021-03-18T17:16:41Z ijchain {*** absc leaves}
m 2021-03-18T17:18:31Z ijchain {<yukonbob> apn: yeah - it's not *clear* to me that its helpful, though its existence (and the comment) is suggestive... istm its sort of hidden away -- it pulls the Tcl_Command data via a cast somewhere deeper (I forget where). It'd be a nice feature if that Tcl_Command token *were* durable against mistaken identity, but depending how one thinks of it, it also seems like a big ask.}
m 2021-03-18T17:19:20Z ijchain {<user____1> iv4nshm4k0v: thanks for the reminder about ~/.Xdefaults vs ~/.Xresources . I think sometime in the last century I knew this :)}
m 2021-03-18T17:21:03Z ijchain {<cousteau> now, where's the best place to report the bug?  Because a similar bug was reported on the mailing list 8 years ago and no one had fixed or replied yet (until a few days ago when I found the bug)}
m 2021-03-18T17:21:42Z ijchain {<cousteau> (it's a Tcllib bug)}
m 2021-03-18T17:21:58Z suchenwi {Is the profiler actively maintained at all?}
m 2021-03-18T17:22:31Z arjen {Have a nice chat, everyone}
m 2021-03-18T17:22:42Z {} {arjen has left}
m 2021-03-18T17:23:34Z aku {Most Tcllib packages have no real maintainer. You can count profiler among them.}
m 2021-03-18T17:23:42Z stu {user____1, which version of xcircuit are you using, and with which version of Tcl/Tk?}
m 2021-03-18T17:24:19Z aku {As I have a hack week next week I plan to put in some more time into handling Tcllib bugs.}
m 2021-03-18T17:24:50Z aku {Updating the old ticket will bring it to the top of the report I use (sort by last modified first/top)}
m 2021-03-18T17:24:52Z ijchain {<cousteau> aku: yeah I somehow realized that...}
m 2021-03-18T17:25:41Z ijchain {<cousteau> (re: it being unmaintained)}
m 2021-03-18T17:26:10Z ijchain {<cousteau> ok then, I guess I'll report the bug}
m 2021-03-18T17:26:57Z ijchain {<cousteau> in any case, the real bug is "descendantTime is sometimes greater than totalRuntime".  This doubly-recursive function was just one use case I managed to come up with where this is reflected.}
m 2021-03-18T17:28:11Z steveb {FWIW EU medicines agency has just confirmed AZ vaccine is 'safe and effective'}
m 2021-03-18T17:28:33Z ijchain {<cousteau> yaaay}
m 2021-03-18T17:28:57Z ijchain {<user____1> Yes, why would they say anything else.}
m 2021-03-18T17:29:20Z ijchain {<cousteau> now they only need to make the vaccines}
m 2021-03-18T17:29:52Z ijchain {<cousteau> user____1: EU medicines agency = EU.  AstraZeneca = not EU.}
m 2021-03-18T17:30:26Z ijchain {<user____1> After this epidemic the cretins in Europe and elsewhere who Excel-optimized all production to overseas outsourcing will be deleted and a normal strategic capability to mnufacture key medication, and PPE, will be maintained at EU level.}
m 2021-03-18T17:30:42Z ijchain {<user____1> cousteau: Sweden is in the EU Economic Zone.}
m 2021-03-18T17:30:56Z ijchain {<cousteau> ok, I'll rephrase it}
m 2021-03-18T17:31:02Z ijchain {<cousteau> user____1: EU medicines agency = EU.  Oxford = not EU.}
m 2021-03-18T17:31:09Z ijchain {<user____1> I can't wait for the Excel "army" to join the layer of lawyers at the bottom of a lake.}
m 2021-03-18T17:31:11Z ijchain {<cousteau> there; bug fixed :)}
m 2021-03-18T17:31:25Z ijchain {<user____1> cousteau: The other half of Astra-Zeneca is in Sweden.}
m 2021-03-18T17:32:51Z ijchain {<cousteau> is it half of it really?  It seemed to me that it was mostly UK-led}
m 2021-03-18T17:33:26Z ijchain {<user____1> off topic but highly relevant https://www.supplychainbrain.com/blogs/1-think-tank/post/31756-how-the-pandemic-will-permanently-transform-sourcing-strategies}
m 2021-03-18T17:33:48Z ijchain {<user____1> cousteau: UK end has the money and the CEOs, iirc Sweden has production and labs}
m 2021-03-18T17:34:07Z ijchain {<user____1> https://en.wikipedia.org/wiki/AstraZeneca cousteau}
m 2021-03-18T17:34:26Z ijchain {<cousteau> the pandemic is permanently going to change many things, or SHOULD at least... let's hope humanity is able to learn the lessons from it.  My expectations aren't very big though}
m 2021-03-18T17:34:46Z ijchain {<user____1> Humanity will learn, Excel jockeys and beancounters won't.}
m 2021-03-18T17:34:50Z ijchain {<user____1> Thus the need for lakes.}
m 2021-03-18T17:35:50Z ijchain {<thrig> learn from history? probably not}
m 2021-03-18T17:36:13Z ijchain {<user____1> History is a harsh teacher. Only those who did not make big mistakes get to write it...}
m 2021-03-18T17:36:25Z ijchain {«Markem» Grr.. if it could change just one thing in Tcl, it'd be:   `namespace current` ... _returns *::* for the global namespace as a convenience to programmers_. ... I have yet to find this 'convenient'. Convenient would be the empty string.}
m 2021-03-18T17:36:39Z ijchain {<user____1> Of course, new idiots are free to ignore history, and repeat it's mistakes.}
m 2021-03-18T17:37:14Z ijchain {<cousteau> "Those who learn from history are doomed to see others repeat it"}
m 2021-03-18T17:37:16Z ijchain {<user____1> Markem I prefer :: and it's easy to check against it. Also any global name is also ::name}
m 2021-03-18T17:37:30Z ijchain {<cousteau> Alternatively, "We learn from history that we don't learn from history"}
m 2021-03-18T17:37:50Z ijchain {<RhodiumToad> "Those who do not learn from history are doomed to repeat its errors; those who do will find other ways to err"}
m 2021-03-18T17:38:01Z ijchain {<user____1> "we learn from history because we did not make big mistakes. those who made, are no longer around to learn"}
m 2021-03-18T17:38:24Z ijchain {<cousteau> yeah, that is a good point}
m 2021-03-18T17:38:44Z steveb {The vaccine was developed in OXford  at the Jenner Institute, a part of Oxford University.  It is a reworked  version of an MERS vaccine developed there, with re-edited genetic material to match the difference in viruses.  UK government poured money iinnto the development, and a deal was brokered to sell the finished product at ost price to all-comers,  That's how it happened so quickly.}
m 2021-03-18T17:38:54Z ijchain {<cousteau> RhodiumToad: at least those are being innovative and creative}
m 2021-03-18T17:38:56Z ijchain {«Markem» Yeah but it's mixing :: as a separator and also as the name of a namespace, any other namespace is not returned with a trailing '::'...}
m 2021-03-18T17:39:50Z ijchain {<cousteau> you can think of it as a :: followed by an empty string}
m 2021-03-18T17:39:55Z ijchain {<cousteau> ::{}}
m 2021-03-18T17:41:20Z ijchain {«Markem» actually, isn't it really {}::}
m 2021-03-18T17:42:02Z ijchain {«Markem» i.e. {}::ns1::ns2}
m 2021-03-18T17:42:03Z ijchain {<cousteau> whereas {} would mean "a sequence of exactly zero tokens of the form "::<identifier>"", but has the problem that it doesn't start with :: so it's not based on the "namespace root"}
m 2021-03-18T17:43:05Z ijchain {«Markem» the global namespace is the empty string...therefore, returning :: is not convenient, it just leads to horrid little special case checks.}
m 2021-03-18T17:43:18Z suchenwi {Root and separators are often the same: / in file systems, "." in Tk widgets, "::" for namespaces...}
m 2021-03-18T17:43:29Z ijchain {<cousteau> I'm thinking of :: as Unix's "/".  foo/bar means bar in the foo directory in the current directory.  /foo/bar means bar in the foo directory in the root directory.}
m 2021-03-18T17:43:55Z ijchain {<iv4nshm4k0v> cousteau: +1.}
m 2021-03-18T17:44:00Z ijchain {<cousteau> /foo is foo hanging from the root directory; the root directory is "/", not ""}
m 2021-03-18T17:44:22Z ijchain {<cousteau> BUT, as Markem mentions, this is somewhat an exception}
m 2021-03-18T17:45:01Z ijchain {«Markem» I'm only talking about the `namespace current` command, not the entire scheme.}
m 2021-03-18T17:45:10Z ijchain {<cousteau> like, the trailing / is not really part of the directory name, EXCEPT for the root directory}
m 2021-03-18T17:45:35Z ijchain {<cousteau> ...Well, yeah, I can see how that's annoying}
m 2021-03-18T17:45:43Z ijchain {<cousteau> because then you can't just append ::blah to it}
m 2021-03-18T17:45:49Z ijchain {«Markem» exactly}
m 2021-03-18T17:45:55Z ijchain {<cousteau> like [namespace current]::blah}
m 2021-03-18T17:46:16Z ijchain {<cousteau> I was missing a use case there :)}
m 2021-03-18T17:46:22Z ijchain {<user____1> Markem simply: use :: on ALL globals. Never use globals with no :: anywhere, including not in visibly global source.}
m 2021-03-18T17:46:40Z suchenwi {oh, you can: two or more colons are namespace separator...}
m 2021-03-18T17:46:50Z ijchain {<user____1> This is what I do. Keeps me sane when programs get complex enough to stomp on global vars by mistake}
m 2021-03-18T17:47:01Z ijchain {<cousteau> ok so :::::foo is the same as ::foo?  That's convenient}
m 2021-03-18T17:47:14Z ijchain {<cousteau> same as doing //tmp I guess}
m 2021-03-18T17:47:33Z ijchain {<user____1> % set ::foo "42"}
m 2021-03-18T17:47:34Z ijchain {<user____1> 42}
m 2021-03-18T17:47:34Z ijchain {<user____1> % puts $::::foo}
m 2021-03-18T17:47:34Z ijchain {<user____1> 42}
m 2021-03-18T17:47:34Z ijchain {<user____1> %}
m 2021-03-18T17:47:57Z ijchain {<cousteau> yeah but the most interesting thing, it works with an odd number of colons too}
m 2021-03-18T17:48:00Z ijchain {<user____1> But simply just use :: on all globals.}
m 2021-03-18T17:48:00Z ijchain {<cousteau> (3 or more)}
m 2021-03-18T17:48:18Z ijchain {<user____1> cousteau: I think that's tcl's shortest-unique-match at work}
m 2021-03-18T17:48:26Z ijchain {<user____1> Possibly not intended here.}
m 2021-03-18T17:48:34Z ijchain {<cousteau> this explains why var names beginning with a single : are "private" -- there's no way to refer to them from another namespace}
m 2021-03-18T17:48:44Z ijchain {<user____1> :)}
m 2021-03-18T17:49:04Z ijchain {<user____1> Wait, where is this documented?}
m 2021-03-18T17:49:06Z ijchain {<cousteau> well, suchenwi said "two or more colons are namespace separator"}
m 2021-03-18T17:49:41Z ijchain {<cousteau> (this wasn't a reply to "where is this documented" btw.  I don't consider a single comment on IRC as documentation)}
m 2021-03-18T17:49:48Z ijchain {<cousteau> (even in logged channels)}
m 2021-03-18T17:50:01Z ijchain {<user____1> i just learned the hard way that lua's functions are variadic always. function foo( bar, ... ); can be called as function(); function(x); etc. the ... is just noise used to access the variadic args in the body}
m 2021-03-18T17:50:30Z ijchain {<cousteau> yeah, I remember lua being weird in that way}
m 2021-03-18T17:50:32Z ijchain {<user____1> So foo() call is not an error, unless detected in the body by user code}
m 2021-03-18T17:50:38Z ijchain {<cousteau> same for return arguments.  Always variadic.}
m 2021-03-18T17:50:42Z ijchain {<user____1> It is beyond weird, it is evil}
m 2021-03-18T17:51:14Z ijchain {<user____1> Make a small mistake and the errors pop up elsewhere than expected}
m 2021-03-18T17:51:35Z ijchain {<cousteau> Oh, and this is funny: if foo() returns multiple values, say `1,2,3`, then blah(foo(),foo(),foo()) is the same as blah(1,1,1,2,3)}
m 2021-03-18T17:51:49Z ijchain {<user____1> yep. See unpack()}
m 2021-03-18T17:52:28Z ijchain {<user____1> lua with it's metatables is quite trippy. Been coding in lua for a week, on openwrt platform, it is quite fast, unlike tcl.}
m 2021-03-18T17:52:33Z ijchain {«Markem» _ok so :::::foo is the same as ::foo_  yup, unless you want to do a comparison with a stored value}
m 2021-03-18T17:52:50Z ijchain {<cousteau> I like lua's syntactic simplicity (while avoiding Tcl's "everything's a string" paradigm and awkward way to type expressions), but it IS weird as hell}
m 2021-03-18T17:52:58Z stu {user____1, which version of xcircuit are you using, and with which version of Tcl/Tk?}
m 2021-03-18T17:53:17Z ijchain {<user____1> stu xcircuit has it's own built in wish interpreter.}
m 2021-03-18T17:54:00Z ijchain {<cousteau> Markem: I'd say that's a more specific use case}
m 2021-03-18T17:54:28Z stu {user____1, which version of xcircuit are you using?}
m 2021-03-18T17:54:48Z ijchain {<cousteau> I don't know if there's a function to load/`cd` to a certain workspace, but in that case I guess "::" will be clearer than ""}
m 2021-03-18T17:55:07Z ijchain {<user____1> stu 3.9.73 on debian buster/devuan beowulf}
m 2021-03-18T17:55:14Z stu {Thanks you}
m 2021-03-18T17:55:19Z ijchain {<user____1> yw}
m 2021-03-18T17:55:45Z ijchain {<user____1> stu why interested in the version if I may ask?}
m 2021-03-18T17:57:13Z stu {Because I'm the porter for xcircuit on OpenBSD, which is currently using a pre-3.9 version.}
m 2021-03-18T17:57:19Z ijchain {<user____1> ah}
m 2021-03-18T17:58:03Z stu {I believe there was a big jump at that time and so I was curious to see if  a more recent xcircuit was working well with a more recent Tcl.}
m 2021-03-18T17:58:09Z ijchain {<user____1> I am curious if it shows the same behavior on OpenBSD. Full screen open on xfce4 wm with no decorations, disregarding -geometry cli and ~/.Xdefaults settings}
m 2021-03-18T17:59:07Z stu {I don't remember if xcircuit builds a whole Tcl/Tk or just has a tkAppInit. Either way there should be some indication of a Tcl version somewhere.}
m 2021-03-18T17:59:21Z ijchain {<user____1> One can open a console iirc}
m 2021-03-18T17:59:23Z ijchain {<user____1> lookin}
m 2021-03-18T17:59:33Z stu {Or About screen.}
m 2021-03-18T17:59:44Z ijchain {<user____1> (hw-interface) 1 % puts $tcl_version}
m 2021-03-18T17:59:51Z ijchain {<user____1> 8.6}
m 2021-03-18T17:59:56Z stu {Great, thanks.}
m 2021-03-18T18:00:04Z ijchain {<user____1> No About screen, but "TCL Console" option in File menu...}
m 2021-03-18T18:00:41Z stu {I'm not able to test such a thing right now.}
m 2021-03-18T18:00:48Z ijchain {<user____1> specifically 8.6.9}
m 2021-03-18T18:01:30Z stu thanks
m 2021-03-18T18:02:25Z {} {suchenwi has left}
m 2021-03-18T18:02:27Z {} {suchenwi has become available}
m 2021-03-18T18:03:33Z ijchain {*** puremouron leaves}
m 2021-03-18T18:03:55Z ijchain {<user____1> Note this is the same tcl version installed on this system outside xcircuit.}
m 2021-03-18T18:04:18Z ijchain {<user____1> So I have no way to know if it is reporting the system tclsh version or the xcircuit one. But I assume it is the former.}
m 2021-03-18T18:04:35Z ijchain {<user____1> tcl is not in the dependencies list of xcircuit binary afaik.}
m 2021-03-18T18:04:48Z ijchain {* user____1 checks}
m 2021-03-18T18:05:21Z ijchain {<user____1> It does depend on system libtcl and libtk}

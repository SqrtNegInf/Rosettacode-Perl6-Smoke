#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Iterated_digits_squaring
#c# 2016-05-10 <RC, 2017-05-01 <RC
#t# toodamnslow
#m# MOAR: OK
#j#  JVM: OK

# 'slower' method for 1 million
#    20161123:  488.091u 3.883s 9:32.62 85.9% 
#    20170123:  346.000u 1.076s 5:48.55 99.5%
#    20170123: 1575.136u 9.628s 24:57.94 105.7 [for JVM]
#    20180814:  193.769u 1.137s 3:14.83 100.0%
#    20181004:  179.995u 1.058s 3:00.72 100.1%
#    20181005:  622.302u 663.345s 7:32.78 283.9% (much worse with .race, likewise for other method)
#    _NEXT_

# 'faster' method for 100 million, compare with *-nqp
#    20170613:  769.361u 2.068s 12:54.36 99.6% 
#    20180814:  409.173u 0.882s  6:50.60 99.8%
#    20181004:  359.537u 0.832s  6:00.49 99.9%

#This fairly abstract version does caching and filtering to reduce the number of values it needs to check 
# and moves calculations out of the hot loop, but is still fairly slow... even for just up to 1,000,000.

constant @sq = ^10 X** 2;
my $cnt = 0;

sub Euler92($n) {
    $n == any(1,89) ?? $n !!
    (state %){$n} //= Euler92( [+] @sq[$n.comb] )
}

if (False) {
for 1 .. 1_000_000 -> $n {
   my $i = +$n.comb.sort.join;
   ++$cnt if Euler92($i) == 89;
}
say $cnt;

use Test;
is $cnt, 856929, 'Slower method';
exit;
}

#All is not lost, however. Through the use of gradual typing, Perl 6 scales down as well as up, so this jit-friendly version is performant enough to brute force the larger calculation:

my @cache;
@cache[1] = 1;
@cache[89] = 89;

sub altEuler92(int $n) {
    $n < 649  # 99,999,999 sums to 648, so no point remembering more
        ?? (@cache.AT-POS($n) //= ids($n))
        !! ids($n)
}

sub ids(int $num --> int) {
    my int $n = $num;
    my int $ten = 10;
    my int $sum = 0;
    my int $t;
    my int $c;
    repeat until $n == 89 or $n == 1 {
        $sum = 0;
        repeat {
            $t = $n div $ten;
            $c = $n - $t * $ten;
            $sum = $sum + $c * $c;
        } while $n = $t;
        $n = @cache.AT-POS($sum) // $sum;
    }
    $n;
}

my int $c = 0;
#for 1 .. 100_000_000 -> int $n {
for 1 .. 1_000_000 -> int $n {
   $c = $c + 1 if altEuler92($n) == 89;
}
say $c;

use Test;
is $c, 856929,   'Faster method'; # for   1_000_000
#is $c, 85744333, 'Faster method'; # for 100_000_000

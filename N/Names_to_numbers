#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Names_to_numbers
#t# inprogress
#c# 2019-11-25 >RC
#p# OK

my @res;

#Charlemagne died in eight fourteen
my $phrases-with-numbers = q:to/END/;
twelve dozen is one hundred forty-four, aka 'one gross'
two hundred pairs of socks
Giving one hundred ten% effort
zero dollars and thirty-seven cents
One hour, fifty-nine minutes, forty seconds
Seventy-two dollars
Two Thousand and One: A Space Odyssey

One Hundred and One Dalmatians
A Hundred and One Dalmatians
One Hundred One Dalmatians
Hundred and One Dalmatians
END

my $pure-numbers = q:to/END/;
# COMMENT
Twenty Nineteen
Nineteen Eighty-Four

four billion, two hundred ninety-four million, nine hundred sixty-seven thousand, two hundred ninety five
Ninety-Nine Trillion Nine Hundred Ninety-Nine Billion Nine Hundred Ninety-Nine Million Nine Hundred Ninety-Nine Thousand Nine Hundred Ninety-Nine
Nine quadrillion, seven trillion, one hundred ninety-nine billion, two hundred fifty-four million, seven hundred forty thousand, nine hundred ninety two

Nine Hundred Ninety-Nine
One Thousand One Hundred Eleven
Eleven Hundred Eleven
Eight Thousand Eight Hundred Eighty-Eight
Eighty-Eight Hundred Eighty-Eight
Seven Million Seven Hundred Seventy-Seven Thousand Seven Hundred Seventy-Seven

ninety-nine
three hundred
three hundred and ten
one thousand, five hundred and one
twelve thousand, six hundred and nine
five hundred and twelve thousand, six hundred and nine
two billion, one hundred

zero
eight
one hundred
one hundred twenty three
one thousand one
ninety nine thousand nine hundred ninety nine
one hundred thousand
one hundred eleven billion one hundred eleven
END

my %nums = (
    zero        => 0,     one        => 1,     two         => 2,     three    => 3,
    four        => 4,     five       => 5,     six         => 6,     seven    => 7,
    eight       => 8,     nine       => 9,     ten         => 10,    eleven   => 11,
    twelve      => 12,    thirteen   => 13,    fourteen    => 14,    fifteen  => 15,
    sixteen     => 16,    seventeen  => 17,    eighteen    => 18,    nineteen => 19,
    twenty      => 20,    thirty     => 30,    forty       => 40,    fifty    => 50,
    sixty       => 60,    seventy    => 70,    eighty      => 80,    ninety   => 90,
    hundred     => 100,   thousand   => 1_000, million     => 1_000_000,
    billion     => 1_000_000_000,              trillion    => 1_000_000_000_000,
    quadrillion => 1_000_000_000_000_000,      quintillion => 1_000_000_000_000_000_000
);

# Groupings:     thousand million billion  trillion quadrillion quintillion
my token groups { \d**4  | \d**7 | \d**10 | \d**13 | \d**16    | \d**19 }; 

# remove hyphens/spaces: leading, trailing, multiple
sub squeeze ($str is copy) { $str ~~ s:g/'-' | \s+ / /; $str .=trim }

# commify larger numbers for readabilty
sub comma { $^i.chars > 4 ?? $^i.flip.comb(3).join(',').flip !! $^i }

#for $phrases-with-numbers.split("\n") -> $orig {
sub numify ($data) {
    #return Nil if $data ~~ /^^ ( \s* $ || \s* '#' ) /;

    my $str = squeeze $data.lc;

    # tokenize sentence boundaries, punctuation, symbols
#    $str ~~ s:g/(<[.?!]>) / $0\n/; # DH kill
#    $str ~~ s:g/(<[.?!]>)$/ $0\n/; # DH kill
    $str ~~ s:g/\$(.)/\$ $0/;
    $str ~~ s:g/(.)(<punct>)/$0 $1/;

    # what's up with 'billion' ??
    #$str ~~ s:g/ <|w> $_ <|w> / %nums{$_} / for %nums.keys;
#   map { say "k:$_"; sleep .5; $str ~~ s:g/ <|w> $_ <|w> / %nums{'$_'} / }, %nums.keys.sort;

    for %nums.keys -> $key { $str ~~ s:g/ <|w> $key <|w> / %nums{$key} / }

    $str ~~ s:g/(\d) \s+ [','|'and'] \s+ (\d)/$0 $1/;

    $str ~~ s:g/ <|w> (\d) \s+'100'\s+ (\d\d) \s+ (\d) \s+    (<groups>) <|w> / {($0 * 100 + $1 + $2) * $3} /;

    $str ~~ s:g/ <|w> (\d) \s+ 100 \s+ (\d ** 1..2) \s+       (<groups>) <|w> / {($0 * 100 + $1) * $2}      /;
#   $str ~~ s:g/ <|w> (\d) \s+ 100 \s+ (\d\d) \s+             (<groups>) <|w> / {($0 * 100 + $1) * $2}      /; # DH kill
#   $str ~~ s:g/ <|w> (\d) \s+ 100 \s+ (\d) \s+               (<groups>) <|w> / {($0 * 100 + $1) * $2}      /; # DH kill

    $str ~~ s:g/ <|w> (\d) \s+ 100 \s+                        (<groups>) <|w> / {$0 * $1 * 100}             /;
    $str ~~ s:g/ <|w>      \s+ 100 \s+ (\d\d) \s+ (\d) \s+    (<groups>) <|w> / {(100 + $0 + $1) * $2}      /;

    $str ~~ s:g/ <|w>      \s+ 100 \s+ (\d ** 1..2) \s+       (<groups>) <|w> / {(100 + $0) * $1}           /;
#   $str ~~ s:g/ <|w>      \s+ 100 \s+ (\d\d) \s+             (<groups>) <|w> / {(100 + $0) * $1}           /;
#   $str ~~ s:g/ <|w>      \s+ 100 \s+ (\d) \s+               (<groups>) <|w> / {(100 + $0) * $1}           /;

    $str ~~ s:g/ <|w>      \s+ 100 \s+                        (<groups>) <|w> / {$0 * 100}                  /;
    $str ~~ s:g/ <|w>              (\d\d) \s+ (\d) \s+        (<groups>) <|w> / {($0 + $1) * $2}            /;
    $str ~~ s:g/ <|w>              (\d ** 1..2) \s+           (<groups>) <|w> / {$0 * $1}                   /;
    $str ~~ s:g/ <|w>              (\d\d) \s+ (\d) \s+ 100 \s*           <|w> / {($0 + $1) * 100}           /;
    $str ~~ s:g/ <|w>              (\d ** 1..2)    \s+ 100 \s*           <|w> / {$0 * 100}                  /;
    $str ~~ s:g/ <|w>              (\d ** 2) \s+ (\d ** 2)               <|w> / {$0 * 100 + $1}             /;

    $str ~~ s:g/( [\d+\s+]* \d+ ) / {[+] $0.split: ' '} /;

    $str ~~ s:g/[(\d+) \s+ 'pairs of'] / {$0 *  2} /;
    $str ~~ s:g/[(\d+) \s+ 'dozen']    / {$0 * 12} /;

    squeeze $str;
}

@res.push: $_ ~ ' --> ' ~ .&numify        for $phrases-with-numbers.split("\n").grep: *.so;
@res.push: $_ ~ ' --> ' ~ .&numify.&comma for         $pure-numbers.split("\n").grep: *.so;

#.say for @res; 

my $ref = q:to/END/;
twelve dozen is one hundred forty-four, aka 'one gross' --> 144 is 144 , aka ' 1 gross '
two hundred pairs of socks --> 400 socks
Giving one hundred ten% effort --> giving 110 % effort
zero dollars and thirty-seven cents --> 0 dollars and 37 cents
One hour, fifty-nine minutes, forty seconds --> 1 hour , 59 minutes , 40 seconds
Seventy-two dollars --> 72 dollars
Two Thousand and One: A Space Odyssey --> 2001 : a space odyssey
One Hundred and One Dalmatians --> 101 dalmatians
A Hundred and One Dalmatians --> a 101 dalmatians
One Hundred One Dalmatians --> 101 dalmatians
Hundred and One Dalmatians --> 101 dalmatians
# COMMENT --> # c,omm,ent
Twenty Nineteen --> 2019
Nineteen Eighty-Four --> 1984
four billion, two hundred ninety-four million, nine hundred sixty-seven thousand, two hundred ninety five --> 4,294,967,295
Ninety-Nine Trillion Nine Hundred Ninety-Nine Billion Nine Hundred Ninety-Nine Million Nine Hundred Ninety-Nine Thousand Nine Hundred Ninety-Nine --> 99,999,999,999,999
Nine quadrillion, seven trillion, one hundred ninety-nine billion, two hundred fifty-four million, seven hundred forty thousand, nine hundred ninety two --> 9,007,199,254,740,992
Nine Hundred Ninety-Nine --> 999
One Thousand One Hundred Eleven --> 1111
Eleven Hundred Eleven --> 1111
Eight Thousand Eight Hundred Eighty-Eight --> 8888
Eighty-Eight Hundred Eighty-Eight --> 8888
Seven Million Seven Hundred Seventy-Seven Thousand Seven Hundred Seventy-Seven --> 7,777,777
ninety-nine --> 99
three hundred --> 300
three hundred and ten --> 310
one thousand, five hundred and one --> 1501
twelve thousand, six hundred and nine --> 12,609
five hundred and twelve thousand, six hundred and nine --> 512,609
two billion, one hundred --> 2,000,000,100
zero --> 0
eight --> 8
one hundred --> 100
one hundred twenty three --> 123
one thousand one --> 1001
ninety nine thousand nine hundred ninety nine --> 99,999
one hundred thousand --> 100,000
one hundred eleven billion one hundred eleven --> 111,000,000,111
END

use Test;
is @res.join("\n"), chomp $ref;

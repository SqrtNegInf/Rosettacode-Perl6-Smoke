#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Text_between
#c# 2018-01-10 <RC
#m# MOAR: OK
#j# JVM:  OK

# Works with: Rakudo version 2017.12
# It seems somewhat pointless to write a special purpose routine to do text matching as built-in primitives can do so more flexibly and concisely, but whatever.
# This version doesn't use strings for meta indexes ('start' and 'end'), rather it accepts regex assertions which are parsed differently from strings. This allows much more robust and fine grained control over what does and doesn't match. (and allows delimiter strings of 'start' and 'end' incidentally.) See the 11th example below which will confound nearly all of the current string only based implementations.

sub text-between ( $text, $start, $end ) {
    return $/>>[0]>>.Str if $text ~~ m:g/ $start (.*?) $end /;
    []
}

my @res;
 
# Testing
my $text = 'Hello Rosetta Code world';
 
# String start and end delimiter
@res.push:  '1> '~ $text.&text-between( 'Hello ', ' world' );
 
# Regex string start delimiter
@res.push:  '2> '~ $text.&text-between( rx/^/, ' world' );
 
# Regex string end delimiter
@res.push:  '3> '~ $text.&text-between( 'Hello ',  rx/$/ );
 
# End delimiter not found, default to string end
@res.push:  '5> '~ '<text>Hello <span>Rosetta Code</span> world</text><table style="myTable">'\
    .&text-between( '<text>', rx/'<table>' | $/ );
 
# Start delimiter not found, return blank string
@res.push:  '6> '~ '<table style="myTable"><tr><td>hello world</td></tr></table>'\
    .&text-between( '<table>', '</table>' );
 
# Multiple end delimiters, match frugally
@res.push:  '7> '~ 'The quick brown fox jumps over the lazy other fox'\
    .&text-between( 'quick ', ' fox' );
 
# Multiple start delimiters, match frugally
@res.push:  '8> '~ 'One fish two fish red fish blue fish'\
    .&text-between( 'fish ', ' red' );
 
# Start delimiter is end delimiter
@res.push:  '9> '~ 'FooBarBazFooBuxQuux'\
    .&text-between( 'Foo', 'Foo' );
 
# Return all matching strings when multiple matches are possible
@res.push:  '10> '~ join ',', $text.&text-between( 'e', 'o' );
 
# Ignore start and end delimiter string embedded in longer words
@res.push:  '11> '~ 'Soothe a guilty conscience today, string wrangling is not the best tool to use for this job.'\
    .&text-between( rx/<<'the '/, rx/' to'>>/ );

.say for @res;

my $ref = qq:to/END/;
1> Rosetta Code
2> Hello Rosetta Code
3> Rosetta Code world
5> Hello <span>Rosetta Code</span> world</text><table style="myTable">
6> 
7> brown
8> two fish
9> BarBaz
10> ll,tta C, w
11> best tool
END

use Test;
is @res.join("\n"), chomp $ref;

#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Water_collected_between_towers
#c# 2016-12-06 <RC
#m# MOAR: OK
#j#  JVM: OK

#`{{ 
Water collected between towers
 
From Rosetta CodeJump to:navigation, search

 
 Water collected between towers  is a draft programming task. It is not yet considered ready to be promoted as a complete task, for reasons that should be found in its talk page.
Task

In a two-dimensional world, we begin with any bar-chart (or row of close-packed 'towers', each of unit width), and then it rains,
filling any convex enclosures in the chart with water.



9               ██           9               ██    
8               ██           8               ██    
7     ██        ██           7     ██░░░░░░░░██    
6     ██  ██    ██           6     ██░░██░░░░██    
5 ██  ██  ██  ████           5 ██░░██░░██░░████    
4 ██  ██  ████████           4 ██░░██░░████████    
3 ██████  ████████           3 ██████░░████████    
2 ████████████████  ██       2 ████████████████░░██
1 ████████████████████       1 ████████████████████


In the example above, a bar chart representing the values [5, 3, 7, 2, 6, 4, 5, 9, 1, 2] has filled, collecting 14 units of water.
Write a function, in your language, from a given array of heights, to the number of water units that would be collected in this way, by a corresponding bar chart.
Display test results for water collected by bar charts for the following 6 series of bar heights:

   [[1, 5, 3, 7, 2],
    [5, 3, 7, 2, 6, 4, 5, 9, 1, 2],
    [5, 5, 5, 5],
    [5, 6, 7, 8],
    [8, 7, 7, 6],
    [6, 7, 10, 7, 6]]


See, also:

 Four Solutions to a Trivial Problem – a Google Tech Talk by Guy Steele
 Water collected between towers on Stack Overflow, from which the example above is taken)
 An interesting Haskell solution, using the Tardis monad, by Phil Freeman in a Github gist.


}}

#`{{
Haskell[edit]
Following cdk's Haskell solution at Stack Overflow:

waterCollected :: [Int] -> Int
waterCollected xs = 
    -- water collects only in flanked concavities
    -- (i.e. where there is a gap between the high tide mark
    --       and the sea bed beneath)
    sum (filter (> 0) (zipWith (-) levels xs))
      where
        -- high tide is the level of the lower of the
        -- two flanking walls
        levels = zipWith min 
            (init $ scanr max 0 xs)
            (tail $ scanl max 0 xs)
 
main :: IO ()   
main = mapM_ (putStrLn . show . waterCollected) [
    [1, 5, 3, 7, 2],
    [5, 3, 7, 2, 6, 4, 5, 9, 1, 2],
    [5, 5, 5, 5],
    [5, 6, 7, 8],
    [8, 7, 7, 6],
    [6, 7, 10, 7, 6]]

Output:
2
14
0
0
0
0
}}

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Word_search
#c# 2020-02-07 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# different answers when run from interactive shell vs cron-launch?

srand 123456;

my @res;

my $rows = 10;
my $cols = 10;

my $message = q:to/END/;
    .....R....
    ......O...
    .......S..
    ........E.
    T........T
    .A........
    ..C.......
    ...O......
    ....D.....
    .....E....
    END

my %dir =
    '→' => (1,0),
    '↘' => (1,1),
    '↓' => (0,1),
    '↙' => (-1,1),
    '←' => (-1,0),
    '↖' => (-1,-1),
    '↑' => (0,-1),
    '↗' => (1,-1)
;

my @ws = $message.comb(/<print>/);

my $path = './ref/unixdict.txt'; # or wherever

my @words = $path.IO.slurp.words.grep( { $_ !~~ /<-[a..z]>/ and 2 < .chars < 11 } ).pick(*);
my %index;
my %used;

while @ws.first( * eq '.') {

    # find an unfilled cell
    my $i = @ws.grep( * eq '.', :k ).pick;

    # translate the index to x / y coordinates
    my ($x, $y) = $i % $cols, floor($i / $rows);

    # find a word that fits
    my $word = find($x, $y);

    # Meh, reached an impasse, easier to just throw it all
    # away and start over rather than trying to backtrack.
    restart, next unless $word;

    %used{"$word"}++;

    # Keeps trying to place an already used word, choices
    # must be limited, start over
    restart, next if %used{$word} > 15;

    # Already used this word, try again
    next if %index{$word.key};

    # Add word to used word index
    %index ,= $word;

    # place the word into the grid
    place($x, $y, $word);

}

display();

sub display {
    @res.push: flat "    ", 'ABCDEFGHIJ'.comb;
    @res.push: $_ for (^10).map: { ($_).fmt("  %2d"), @ws[$_ × $cols .. ($_ + 1) × $cols - 1] }
    @res.push: "\n  Words used:";
    my $max = 1 + %index.keys.max( *.chars ).chars;
    for %index.sort {
        @res.push: sprintf "%{$max}s %4s %s  ", .key, .value.key, .value.value;
        #print "\n" if $++ % 2;
    }
    @res.push: "\n"
}

sub restart {
    @ws = $message.comb(/<print>/);
    %index = ();
    %used = ();
}

sub place ($x is copy, $y is copy, $w) {
    my @word = $w.key.comb;
    my $dir  = %dir{$w.value.value};
    @ws[$y × $rows + $x] = @word.shift;
    while @word {
        ($x, $y) »+=« $dir;
        @ws[$y × $rows + $x] = @word.shift;
    }
 }

sub find ($x, $y) {
    my @trials = %dir.keys.sort.map: -> $dir { # DH this sort is used just to get stable results for testing
            my $space = '.';
            my ($c, $r) = $x, $y;
            loop {
                ($c, $r) »+=« %dir{$dir};
                last if 9 < $r|$c;
                last if 0 > $r|$c;
                my $l = @ws[$r × $rows + $c];
                last if $l ~~ /<:Lu>/;
                $space ~= $l;
            }
            next if $space.chars < 3;
            [$space.trans( '.' => ' ' ),
            ("{'ABCDEFGHIJ'.comb[$x]} {$y}" => $dir)]
        };

    for @words.pick(*) -> $word {
        for @trials -> $space {
            next if $word.chars > $space[0].chars;
            return ($word => $space[1]) if compare($space[0].comb, $word.comb)
        }
    }
}

sub compare (@s, @w) {
    for ^@w {
        next if @s[$_] eq ' ';
        return False if @s[$_] ne @w[$_]
    }
    True
}

.say for @res;

my $moar = q:to/END/;
     A B C D E F G H I J
   0 a b e t a R o u h a
   1 c k u p a p O k s b
   2 c a s t l e i S a a
   3 t r l y i n g y E y
   4 T l a a l u m s l T
   5 j A e j h u m a n e
   6 u t C t l a b o c o
   7 r n b O c p a s s r
   8 a u e k D o i d a r
   9 t b e t b E p i s s

  Words used:
    aba  J 2 ↑  
   abet  A 0 →  
   alum  D 4 →  
    aps  E 0 ↙  
    ash  I 2 ↑  
    bee  C 7 ↓  
    boa  E 9 ↗  
   bunt  B 9 ↑  
    cal  A 1 ↘  
 castle  A 2 →  
 cobalt  I 6 ←  
    etc  C 5 ↘  
 humane  E 5 →  
    jar  D 5 ↖  
   jura  A 5 ↓  
   karl  B 1 ↓  
    lab  I 4 ↙  
  lying  C 3 →  
   okay  G 0 ↘  
    orr  J 6 ↓  
    pap  F 1 ←  
   pass  F 7 →  
   piss  G 9 →  
  radio  J 8 ←  
  smack  H 4 ↙  
   taut  A 3 ↗  
    ten  D 9 ↖  
    tub  A 9 ↗  
    usa  H 0 ↘  
    yip  H 3 ↖  


END

my $xoar = q:to/END/;
     A B C D E F G H I J
   0 s n a s u R r g u m
   1 e v e e r g O r i o
   2 r n o o l b s S e a
   3 a e p i a p a t E s
   4 T t b n p o m r i T
   5 p A d l i g r i v r
   6 i c C p i l u t s b
   7 e i e O o f r e e u
   8 r r i d D a m m e l
   9 p u p c e E r a m f

  Words used:
   band  F 2 ↙  
   cede  B 6 ↘  
    cpu  D 9 ←  
    err  I 2 ↖  
   flub  J 9 ↑  
   free  F 7 →  
   glib  F 1 ↙  
    gum  H 0 →  
    iii  C 8 ↖  
  lemma  J 8 ←  
   loon  E 2 ←  
    mar  I 9 ←  
    mop  G 4 ←  
    oar  E 7 ↘  
    pea  C 3 ←  
   pier  A 5 ↓  
    pup  A 9 →  
    reb  A 2 ↘  
  reeve  E 1 ←  
    rio  H 1 →  
   rite  H 4 ↓  
   sans  D 0 ←  
    sao  J 3 ↑  
 simple  I 6 ↖  
   stir  G 2 ↘  
   tapa  H 3 ←  
    ten  B 4 ↑  
  tulip  H 6 ←  
    uri  B 9 ↑  
    usa  E 0 ←  
 virgil  I 5 ←  


END

my $jvm = q:to/END/;
     A B C D E F G H I J
   0 y s h e a R a n o v
   1 a e h r b s O p i y
   2 d n r s e u e S c l
   3 g e k b i m t k E e
   4 T y c l u n a r y T
   5 i A p i e a i r c l
   6 a h C d r a m m k n
   7 a g p O b e e v i z
   8 a e s u D y l a o d
   9 m l e h c E v c p f

  Words used:
      aaa  A 6 ↓  
    ankle  A 1 ↘  
   aubrey  F 5 ↖  
      bee  E 7 →  
   cleric  H 9 ↖  
      cpa  I 2 ↖  
      crt  I 5 ↖  
      cup  E 9 ↖  
      day  A 2 ↑  
 diminish  J 8 ↖  
     dram  D 6 →  
      ely  J 3 ↑  
      fpc  J 9 ←  
      gel  B 7 ↓  
      gyp  A 3 ↘  
     helm  D 9 ←  
   lunary  D 4 →  
    lykes  J 5 ↖  
      nov  H 0 →  
      phi  C 7 ↖  
      poi  I 9 ↑  
   remark  D 1 ↘  
      sea  C 8 ←  
     shea  B 0 →  
     tube  G 3 ↖  
     vain  G 9 ↗  
      viz  H 7 →  
      yea  F 8 ↑  
      yen  B 4 ↑  
      yip  J 1 ←  


END

use Test;
my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is @res.join("\n"), chomp $ref;

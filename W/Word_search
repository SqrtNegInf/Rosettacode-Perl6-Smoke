#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Word_search
#c# 2020-02-07 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# 2020-10-07 different answers when run from interactive shell vs cron-launch

srand 123456;

my @res;

my $rows = 10;
my $cols = 10;

my $message = q:to/END/;
    .....R....
    ......O...
    .......S..
    ........E.
    T........T
    .A........
    ..C.......
    ...O......
    ....D.....
    .....E....
    END

my %dir =
    '→' => (1,0),
    '↘' => (1,1),
    '↓' => (0,1),
    '↙' => (-1,1),
    '←' => (-1,0),
    '↖' => (-1,-1),
    '↑' => (0,-1),
    '↗' => (1,-1)
;

my @ws = $message.comb(/<print>/);

my $path = './ref/unixdict.txt'; # or wherever

my @words = $path.IO.slurp.words.grep( { $_ !~~ /<-[a..z]>/ and 2 < .chars < 11 } ).pick(*);
my %index;
my %used;

while @ws.first( * eq '.') {

    # find an unfilled cell
    my $i = @ws.grep( * eq '.', :k ).pick;

    # translate the index to x / y coordinates
    my ($x, $y) = $i % $cols, floor($i / $rows);

    # find a word that fits
    my $word = find($x, $y);

    # Meh, reached an impasse, easier to just throw it all
    # away and start over rather than trying to backtrack.
    restart, next unless $word;

    %used{"$word"}++;

    # Keeps trying to place an already used word, choices
    # must be limited, start over
    restart, next if %used{$word} > 15;

    # Already used this word, try again
    next if %index{$word.key};

    # Add word to used word index
    %index ,= $word;

    # place the word into the grid
    place($x, $y, $word);

}

display();

sub display {
    @res.push: flat "    ", 'ABCDEFGHIJ'.comb;
    @res.push: $_ for (^10).map: { ($_).fmt("  %2d"), @ws[$_ × $cols .. ($_ + 1) × $cols - 1] }
    @res.push: "\n  Words used:";
    my $max = 1 + %index.keys.max( *.chars ).chars;
    for %index.sort {
        @res.push: sprintf "%{$max}s %4s %s  ", .key, .value.key, .value.value;
        #print "\n" if $++ % 2;
    }
    @res.push: "\n"
}

sub restart {
    @ws = $message.comb(/<print>/);
    %index = ();
    %used = ();
}

sub place ($x is copy, $y is copy, $w) {
    my @word = $w.key.comb;
    my $dir  = %dir{$w.value.value};
    @ws[$y × $rows + $x] = @word.shift;
    while @word {
        ($x, $y) »+=« $dir;
        @ws[$y × $rows + $x] = @word.shift;
    }
 }

sub find ($x, $y) {
    my @trials = %dir.keys.sort.map: -> $dir { # DH this sort is used just to get stable results for testing
            my $space = '.';
            my ($c, $r) = $x, $y;
            loop {
                ($c, $r) »+=« %dir{$dir};
                last if 9 < $r|$c;
                last if 0 > $r|$c;
                my $l = @ws[$r × $rows + $c];
                last if $l ~~ /<:Lu>/;
                $space ~= $l;
            }
            next if $space.chars < 3;
            [$space.trans( '.' => ' ' ),
            ("{'ABCDEFGHIJ'.comb[$x]} {$y}" => $dir)]
        };

    for @words.pick(*) -> $word {
        for @trials -> $space {
            next if $word.chars > $space[0].chars;
            return ($word => $space[1]) if compare($space[0].comb, $word.comb)
        }
    }
}

sub compare (@s, @w) {
    for ^@w {
        next if @s[$_] eq ' ';
        return False if @s[$_] ne @w[$_]
    }
    True
}

.put for @res;

my $moar-cronjob = q:to/END/;
     A B C D E F G H I J
   0 o p e c k R g a w e
   1 y t o c s a O d i n
   2 e x t i n c t S a d
   3 n c a r c h a e E b
   4 T h u r l e y m c T
   5 a A n j a b r y e d
   6 i n C p m a l r l g
   7 d i a O g n o l a e
   8 a n r u D h u r t p
   9 w e s u s E c n e w

  Words used:
    ache  F 1 ↓  
     aid  C 7 ←  
    alec  I 7 ↑  
     ana  A 5 ↘  
  archae  C 3 →  
     bad  J 3 ↖  
     car  B 3 →  
     cot  D 1 ←  
    crag  G 9 ↗  
     dey  J 5 ←  
     din  H 1 →  
     end  J 0 ↓  
 extinct  A 2 →  
  hurley  B 4 →  
    hurt  F 8 →  
     jab  D 5 →  
    lamp  G 6 ←  
    long  H 7 ←  
     new  H 9 →  
    nine  B 6 ↓  
     nrc  C 5 ↗  
    opec  A 0 →  
    peck  B 0 →  
     peg  J 8 ↑  
     rna  C 8 ←  
    scam  E 1 ↘  
   shore  E 9 ↗  
   sugar  C 9 ↗  
     use  D 9 ←  
    wadi  A 9 ↑  
     wag  I 0 ←  
     yen  A 1 ↓  


END

my $moar-terminal = q:to/END/;
     A B C D E F G H I J
   0 t o n a l R r i m p
   1 z t h t z n O a i m
   2 a c o l o n y S t u
   3 g u g w r r l c E j
   4 T y t o n r o h t T
   5 h A t o r s p i y t
   6 e e C n o d m a d a
   7 l c r O u g i e a w
   8 i u a c D o r a n s
   9 x r s e a E b e n o

  Words used:
      ace  C 8 ↖  
     acre  E 9 ↖  
      ada  H 6 →  
      aim  H 1 →  
      ann  I 7 ↓  
     auto  A 2 ↘  
   bounty  G 9 ↖  
   colony  B 2 →  
      cur  B 7 ↓  
  gordian  C 3 ↘  
    helix  A 5 ↓  
      hog  C 1 ↓  
     jump  J 3 ↑  
      lop  G 3 ↓  
      nyc  F 1 ↘  
     ogre  E 6 ↘  
      one  J 9 ←  
      rim  G 0 →  
      sea  C 9 →  
     swat  J 8 ↑  
    thorn  I 4 ←  
      tim  I 2 ↑  
    tonal  A 0 →  
   toroid  D 1 ↘  
 townsmen  B 1 ↘  
      yip  I 5 ←  
      zag  A 1 ↓  
     zorn  E 1 ↓  


END

my $jvm = q:to/END/;
     A B C D E F G H I J
   0 y s h e a R a n o v
   1 a e h r b s O p i y
   2 d n r s e u e S c l
   3 g e k b i m t k E e
   4 T y c l u n a r y T
   5 i A p i e a i r c l
   6 a h C d r a m m k n
   7 a g p O b e e v i z
   8 a e s u D y l a o d
   9 m l e h c E v c p f

  Words used:
      aaa  A 6 ↓  
    ankle  A 1 ↘  
   aubrey  F 5 ↖  
      bee  E 7 →  
   cleric  H 9 ↖  
      cpa  I 2 ↖  
      crt  I 5 ↖  
      cup  E 9 ↖  
      day  A 2 ↑  
 diminish  J 8 ↖  
     dram  D 6 →  
      ely  J 3 ↑  
      fpc  J 9 ←  
      gel  B 7 ↓  
      gyp  A 3 ↘  
     helm  D 9 ←  
   lunary  D 4 →  
    lykes  J 5 ↖  
      nov  H 0 →  
      phi  C 7 ↖  
      poi  I 9 ↑  
   remark  D 1 ↘  
      sea  C 8 ←  
     shea  B 0 →  
     tube  G 3 ↖  
     vain  G 9 ↗  
      viz  H 7 →  
      yea  F 8 ↑  
      yen  B 4 ↑  
      yip  J 1 ←  


END

use Test;
is @res.join("\n"), chomp $*VM ~~ /jvm/ ?? $jvm !! $*IN.t ?? $moar-terminal !! $moar-cronjob;

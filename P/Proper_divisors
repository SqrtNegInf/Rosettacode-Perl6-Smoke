#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Proper_divisors
#c# 2015-10-30 <>RC, 2018-11-14 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# d'oh, was missing '* >', so .race was never terminating
#n# 2018-12-10: confirmed that there is a race condition if .race is used, but it doesn't affect the RC spec'd results

my @res;

# Works with: rakudo version 2018.10
# Once your threshold is over 1000, the maximum proper divisors will always include 2 3, and 5 as divisors, so only bother to check multiples of 2, 3, and 5.
# There really isn't any point in using concurrency for a limit of 20_000. The setup and bookkeeping drowns out any benefit. Really doesn't start to pay off until the limit is 50_000 and higher. Try swapping in the commented out race map iterator line below for comparison.

sub propdiv (\x) {
    my @l = 1 if x > 1;
    (2 .. x.sqrt.floor).map: -> \d {
        unless x % d { @l.push: d; my \y = x div d; @l.push: y if y != d }
    }
    @l
}

@res.push: "$_ [{propdiv($_)}]" for 1..10;

my @candidates;
loop (my int $c = 30; $c <= 20_000; $c += 30) {
#(30, *+30 ...^ * > 500_000).race.map: -> $c {
    my \mx = +propdiv($c);
    next if mx < @candidates - 1;
    @candidates[mx].push: $c
}

@res.push: "max = {@candidates - 1}, candidates = {@candidates.tail}";

.say for @res;

my $ref = q:to/END/;
1 []
2 [1]
3 [1]
4 [1 2]
5 [1]
6 [1 2 3]
7 [1]
8 [1 2 4]
9 [1 3]
10 [1 2 5]
max = 79, candidates = 15120 18480
END

use Test;
is @res.join("\n"), chomp $ref;

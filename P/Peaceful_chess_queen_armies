#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Peaceful_chess_queen_armies
#t# inprogress
#c# 2019-11-xx >RC
#m# MOAR: BROKEN
#j# JVM:  BROKEN
#n# ◦• ♛: ♕:

my ($soln,%seen);

my $m = 4;
my $n = 5;

my $empty_square = '◦•';

# ([WB])(?:[◦•]*|(?^s:.{4}(?:[◦•].{4})*)|(?^s:.{5}(?:[◦•].{5})*)|(?^s:.{6}(?:[◦•].{6})*))(?!\1)[WB]


say my $re = '(\w)[' ~ join(' |', qq/'~'*/, map { qq/ . ** {$_}['~' ** {$_}]*/ }, $n-1, $n, $n+1) ~ ']<!after $0>\w';
my $attack = "rx/$re/".EVAL;
dd $attack;

my $board = join "\n", map { substr $empty_square x $n, $_%2, $n }, 1..$n;
#place ('~'x $n ~ "\n") x $n;

say my $result = $soln ?? "Solution to $m $n\n\n$soln" !! "No solution to $m $n";

#`[[

sub place ($cb) {
  %seen{$cb}++ || $cb ~~ /$attack/ and return; # previously or attack
  (my $have = $cb.trans('WB' => '') ) < $m * 2 or $soln = $cb and return;
#  #(my $have = tr/WB//) < $m * 2 or exit !print "Solution to $m $n\n\n$_";
  place( $cb.subst(/~/, {<W B>[$have % 2]}, :g ) while $cb ~~ /~/, :g; # place next queen
 #$head.subst(/'|' \N+/, "|$weight|$coverage|")
}

# recursively place the next queen
sub place {
    my($board, $n, $m, $empty_square) = @_;
    state %seen;

    # logic of 'attack' regex: queen ( ... paths between queens containing only empty squares ... ) queen of other color
    my $attack =
    '([WB])' .      # 1st queen
    '(?:' .
        join('|',
            "[$empty_square]*",
            map {
                "(?^s:.{$_}(?:[$empty_square].{$_})*)"
            } $n-1, $n, $n+1
        ) .
    ')' .
    '(?!\1)[WB]';   # 2nd queen

    # bail out if seen this configuration previously, or attack detected
    return if $seen{$board}++ or $board =~ /$attack/;

    # success if queen count is m×2
    $solution = $board and return if $m * 2 == (my $have = $board =~ tr/WB//);

    # place the next queen (alternating colors each time)
    place(   $board =~ s/[$empty_square]\G/ qw<W B>[$have % 2] /er, $n, $m, $empty_square )
       while $board =~  /[$empty_square]/g;
}


my $ref = q:to/EOD/;
•B•B•
B•◦•◦
•◦W◦W
B•◦•◦
•◦W◦W
EOD

use Test;
is $result, chomp $ref;

]]

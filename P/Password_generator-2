#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Password_generator
#c# 2021-01-13 <RC, 2021-01-17 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# 'functional' version, improved as per comments @ RC
#n# over-represents digits?  Sometimes see: Use of Nil in string context (line 25)

my @res;

my @char-groups =
    ['a' .. 'z'],
    ['A' .. 'Z'],
    ['0' .. '9'],
    < $ % & \ ` ~ ! * + , - . / :  ;  = ? @ ^ _  ~ [ ] ( ) { | } # ' " \< \> >.Array;

subset MinimumPasswordLength of  Int where * >= 4;
subset NumberOfPasswords     of UInt where * != 0;

#sub MAIN( NumberOfPasswords:D :c(:$count), MinimumPasswordLength :l(:$length) = 10,  Str :x(:$exclude) = '' )
sub MAIN( NumberOfPasswords :c(:$count) = 1, MinimumPasswordLength :l(:$length) = 10,  Str :x(:$exclude) = '' ) {
    #srand 123456; # doesn't yield stable output
    &USAGE() if 1 == (.comb ∖ $exclude.comb).elems for @char-groups;

    .say for password-characters($length, $exclude )
        .map( *.split(' '))
        .map( *.pick: Inf ) # shuffle, so we don't get a predictable pattern NB: '*' works too, but 'Inf' is interesting here...
        .map( *.join )
        .head( $count );
}

sub password-characters($len, $exclude ) {
    (
      (( char-groups($exclude)       xx Inf ).map: *.pick).batch(     4)
     Z~
      (( char-groups($exclude, $len) xx Inf ).map: *.pick).batch($len-4)
    )
}

multi char-groups( $exclude )              { | @char-groups.map( * ∖ $exclude.comb ) }
multi char-groups( $exclude, $max-weight ) { flat (char-groups($exclude)>>.keys.map: {$_ xx ^$max-weight .roll}) }
#multi char-groups(@exclude, $max-weight ) { flat (map { ($_ xx ^$max-weight .roll) }, char-groups(@exclude)>>.keys) }

sub USAGE() {
    say qq:to/END/;
    Specify a length:              -l=10    (minimum 4)
    Specify a count:               -c=5     (minimum 1)
    Specify characters to exclude: -x=xkcd  (optional)
    Password must have at least one lowercase letter, uppercase letter, digit, punctuation character.
    END
    exit;
}

#`{{ alternate approach
sub password-characters($len, @exclude ) {
    (
     ((    char-groups-one-of-each(@exclude) xx Inf ).map: *.pick).batch(     4)
    Z~
     (( char-groups-random-weights(@exclude) xx Inf ).map: *.pick).batch($len-4)
    )
}

sub    char-groups-one-of-each( @exclude ) { | @char-groups.map( * (-) @exclude ) }

sub char-groups-random-weights( @exclude ) { flat (char-groups-one-of-each(@exclude)>>.keys.map: {$_ xx ^10 .roll}) }
}}

#my $ref = qq:to/END/;
#END
#use Test;
#is @res.join("\n"), chomp $ref;

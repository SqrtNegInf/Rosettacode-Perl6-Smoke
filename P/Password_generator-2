#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Password_generator
#t# inprogress
#c# 2021-01-13 <RC, 2021-01-xx >RC
#m# MOAR: OK
#j#  JVM: OK
#n# 'functional' version, needs work as per comments @ RC

my @res;

subset MinimumPasswordLength of  Int where * >= 4;
subset NumberOfPasswords     of UInt where * != 0;
 
sub MAIN( NumberOfPasswords:D :c(:$count) = 10, MinimumPasswordLength :l(:$length) = 8, Str :x(:$exclude) = '' )
{
    srand 123456; # doesn't yield stable output
    @res.push: $_ for password-characters( char-groups( $exclude.comb ) )
        .batch( $length )
        .map( *.pick: Inf ) # shuffle, so we don't get a predictable pattern
        .map( *.join )
        .head( $count );
 
    .say for @res;

#my $ref = qq:to/END/;
#END
#use Test;
#is @res.join("\n"), chomp $ref;

}
 
sub char-groups( @exclude )
{
    state @char-groups =
        ['a' .. 'z'],
        ['A' .. 'Z'],
        ['0' .. '9'],
        < $ % & \ ` ~ ! * + , - . / :  ;  = ? @ ^ _  ~ [ ] ( ) { | } # ' " \< \> >;
 
    @char-groups
        .map( * (-) @exclude )
#        .grep( *.so );             #  no need for this?
}
 
sub password-characters( @char-groups )
{
    ( |@char-groups xx Inf ).map: *.pick;
}

#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Peaceful_chess_queen_armies
#c# 2019-11-18 NOT ON RC
#m# MOAR: OK
#j# JVM:  OK
#n# big wart: in 'place' routine using literal '◦•' in regex because I cannot figure out a
#n#             way to efficiently create a regex objects built from $empty-square
#n# interpolating variable into character class definition, 
#n# can lead to 'normal' running time, or SUPER-SLOW running time
#n# both the 'slow' approaches involve multi-Gb memory use
#n# all this despite my attempts to signal to the interpreter that $empty-square will never change...

constant $empty-square = '◦•';

#my token es { <[◦•]> };                      # fast 
my token es { <{ "<[$empty-square]>" }> };  # slow, factor of 220

my $es := rx/<{ "<[$empty-square]>" }>/;

# recursively place the next queen
sub place ($board, $n, $m) {
    my $cnt;
    state (%seen,$attack);
    state $solution = False;

    # logic of 'attack' regex: queen ( ... paths between queens containing only empty squares ... ) queen of other color
    once {
      my %Q = 'WBBW'.comb; # return the queen of alternate color
      my $re = 
        '(<[WB]>)' ~                # 1st queen
        '[' ~
          join(' |', 
            qq/<es>*/, 
            map { 
              qq/ . ** {$_}[<es> . ** {$_}]*/ 
            }, $n-1, $n, $n+1
          ) ~
        ']' ~
        '<{%Q{$0}}>';               # 2nd queen
      $attack = "rx/$re/".EVAL;
    }

    # return first result found (omit this line to get last result found)
    return $solution if $solution;

    # bail out if seen this configuration previously, or attack detected
    return if %seen{$board}++ or $board ~~ $attack;

say "$board\n";
    # success if queen count is m×2, set state variable and return from recursion
    $solution = $board and return if $m * 2 == my $queens = $board.comb.Bag{<W B>}.sum;

    # place the next queen (alternating colors each time)
#    place( $board.subst( /<es>/, {<W B>[$queens % 2]}, :nth($cnt) ), $n, $m) # fast
     place( $board.subst( $es,    {<W B>[$queens % 2]}, :nth($cnt) ), $n, $m) # slow, factor of 75
#       while $board ~~ m:nth(++$cnt)/<es>/;   # fast
        while $board.match: $es, :nth(++$cnt); # slow, factor of 80
# combine both 'slow' lines, overall slowdown is by factor of 150

    return $solution;
}

my ($m, $n) = @*ARGS == 2 ?? @*ARGS !! (2, 4);
my $board = ($empty-square x $n**2).comb.rotor($n)>>.join[^$n].join: "\n";

say ( my $solution = place( $board, $n, $m) )
    ?? "Solution to $m $n\n\n{S:g/(\N)/$0 / with $solution}"
    !! "No solution to $m $n";

exit;

my $ref = q:to/END/;
W•◦•W
•◦B◦•
◦B◦B◦
•◦B◦•
W•◦•W
END

#use Test;
#is $solution, chomp $ref;

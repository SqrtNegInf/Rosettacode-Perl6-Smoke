#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Print_debugging_statement
#c# 2019-08-29 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# JVM fails test, but is working 

my @res;

#`{ 
There isn't anything built-in to do this in Rakudo Perl 6, though it's
pretty easy to cobble something together piggybacking off of the exception
system. It would probably be better to instantiate a specific "DEBUG"
exception to avoid interfering with other user instantiated ad-hoc
exceptions, but for a quick-and-dirty demo, this should suffice.  This
example will report any payload contents passed to the exception. If you
want specific information, it will need to be passed in, though some of it
may be determinable through introspection. Reports the file name and line
number where the "debug" call originated and unwinds the call stack to
trace through the subroutine calls leading up to it. Will follow the call
chain into included files and modules, though calls to the CORE setting and
dispatcher are filtered out here to reduce noise.  Comments with the files
line numbers are added here to make it easier to match up the debug output
with the file. Typically you would be editing the file in an editor that
provides line numbering so that wouldn't be necessary/helpful.

}

my &pdb = &die;

CATCH {
    when X::AdHoc {
        my @frames = .backtrace[*];
        @res.push: .payload;
        for @frames {
            # Filter out exception handing and dispatcher frames
            next if .file.contains: 'SETTING' or .subname.chars < 1;
            @res.push: sprintf "%sfrom file: %s,%s line: %s",
              (' ' x $++), .file,
              (my $s = .subname) eq '<unit>' ?? '' !! " sub: $s,", .line;
        }
        @res.push: '';
        .resume;
    }
    default {}
}

## Testing / demonstration

# helper subs                #line 22
sub alpha ($a) {             #line 23
    pdb ('a =>', $a + 3);    #line 24
    pdb 'string';            #line 25
    beta(7);                 #line 26
}                            #line 27
sub beta  ($b) { pdb $b    } #line 28
sub gamma ($c) { beta $c   } #line 29
sub delta ($d) { gamma $d  } #line 30
                             #line 31
my $a = 10;                  #line 32
pdb (.VAR.name, $_) with $a; #line 33
alpha($a);                   #line 34
delta("D");                  #line 35
.&beta for ^3;               #line 36

.say for @res; 

my $moar = q:to/END/;
$a 10
from file: P/Print_debugging_statement, line: 61

a => 13
from file: P/Print_debugging_statement, sub: alpha, line: 52
 from file: P/Print_debugging_statement, line: 62

string
from file: P/Print_debugging_statement, sub: alpha, line: 53
 from file: P/Print_debugging_statement, line: 62

7
from file: P/Print_debugging_statement, sub: beta, line: 56
 from file: P/Print_debugging_statement, sub: alpha, line: 54
  from file: P/Print_debugging_statement, line: 62

D
from file: P/Print_debugging_statement, sub: beta, line: 56
 from file: P/Print_debugging_statement, sub: gamma, line: 57
  from file: P/Print_debugging_statement, sub: delta, line: 58
   from file: P/Print_debugging_statement, line: 63

0
from file: P/Print_debugging_statement, sub: beta, line: 56
 from file: P/Print_debugging_statement, line: 64

1
from file: P/Print_debugging_statement, sub: beta, line: 56
 from file: P/Print_debugging_statement, line: 64

2
from file: P/Print_debugging_statement, sub: beta, line: 56
 from file: P/Print_debugging_statement, line: 64

END

my $jvm = qq:to/END/;
$a 10
from file: gen/jvm/CORE.setting, sub: throw, line: 37756
 from file: gen/jvm/CORE.setting, sub: die, line: 915
  from file: gen/jvm/CORE.setting, sub: infix:<andthen>, line: 52577
   from file: P/Print_debugging_statement, line: 61

a => 13
from file: gen/jvm/CORE.setting, sub: throw, line: 37756
 from file: gen/jvm/CORE.setting, sub: die, line: 915
  from file: P/Print_debugging_statement, sub: alpha, line: 52
   from file: P/Print_debugging_statement, line: 62

string
from file: gen/jvm/CORE.setting, sub: throw, line: 37756
 from file: gen/jvm/CORE.setting, sub: die, line: 915
  from file: P/Print_debugging_statement, sub: alpha, line: 53
   from file: P/Print_debugging_statement, line: 62

7
from file: gen/jvm/CORE.setting, sub: throw, line: 37756
 from file: gen/jvm/CORE.setting, sub: die, line: 915
  from file: P/Print_debugging_statement, sub: beta, line: 56
   from file: P/Print_debugging_statement, sub: alpha, line: 54
    from file: P/Print_debugging_statement, line: 62

D
from file: gen/jvm/CORE.setting, sub: throw, line: 37756
 from file: gen/jvm/CORE.setting, sub: die, line: 915
  from file: P/Print_debugging_statement, sub: beta, line: 56
   from file: P/Print_debugging_statement, sub: gamma, line: 57
    from file: P/Print_debugging_statement, sub: delta, line: 58
     from file: P/Print_debugging_statement, line: 63

0
from file: gen/jvm/CORE.setting, sub: throw, line: 37756
 from file: gen/jvm/CORE.setting, sub: die, line: 915
  from file: P/Print_debugging_statement, sub: beta, line: 56
   from file: gen/jvm/CORE.setting, sub: dispatch:<var>, line: 1746
    from file: P/Print_debugging_statement, line: 64

1
from file: gen/jvm/CORE.setting, sub: throw, line: 37756
 from file: gen/jvm/CORE.setting, sub: die, line: 915
  from file: P/Print_debugging_statement, sub: beta, line: 56
   from file: gen/jvm/CORE.setting, sub: dispatch:<var>, line: 1746
    from file: P/Print_debugging_statement, line: 64

2
from file: gen/jvm/CORE.setting, sub: throw, line: 37756
 from file: gen/jvm/CORE.setting, sub: die, line: 915
  from file: P/Print_debugging_statement, sub: beta, line: 56
   from file: gen/jvm/CORE.setting, sub: dispatch:<var>, line: 1746
    from file: P/Print_debugging_statement, line: 64

END

use Test;
my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is @res.join("\n"), chomp $ref;

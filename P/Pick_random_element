#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Pick_random_element
#c# 2015-12-07 <>RC
#m# MOAR: OK
#j#  JVM: OK

srand 123456;
my @res;

# In a nutshell, picking an element from a list
# is implemented with a method conveniently called "pick":

@res.push: (1, 2, 3).pick;
# There are various ways of doing something similar, though.
# Perl 6 has actually two methods (with associated functional forms)
# to return random elements depending on whether you are doing selection
# with or without replacement.
# Selection with replacement: (roll of a die)

@res.push: (1..6).roll;    # return 1 random value in the range 1 through 6
@res.push: (1..6).roll(3); # return a list of 3 random values in the range 1 through 6
#(1..6).roll(*); # return a lazy infinite list of random values in the range 1 through 6

# Selection without replacement: (pick a card from a deck)
# define the deck
my @deck = (<2 3 4 5 6 7 8 9 J Q K A>) X~ <S C H D>;
@res.push: @deck;
@res.push: @deck.pick;    # Pick a card
@res.push: @deck.pick(5); # Draw 5
@res.push: @deck.pick(*); # Get a shuffled deck

# Or you can always use the normal rand built-in
# to generate a subscript (which automatically truncates any fractional part):

my @array = <1 2 3 3 4 5 6>;
@res.push: @array[@array Ã— rand];

# However, the pick and roll methods (not to be confused
# with the pick-and-roll method in basketball) are more general
# insofar as they may be used on any enumerable type:

@res.push: Bool.pick;  # returns either True or False

.say for @res;

my $moar = qq:to/END/;
3
5
3 3 6
2S 2C 2H 2D 3S 3C 3H 3D 4S 4C 4H 4D 5S 5C 5H 5D 6S 6C 6H 6D 7S 7C 7H 7D 8S 8C 8H 8D 9S 9C 9H 9D JS JC JH JD QS QC QH QD KS KC KH KD AS AC AH AD
9S
QC 2H 8S AH KD
QS JS 3S 6S KS KH 8S 4D 4C 5S 3D QC 2S KD 7H 9D 7D 4S 5C AH 5H 8H 3C JD 3H 6H QH 7C KC 7S JH AD 9H 8D QD 2H 8C 2D 4H 6D 2C AS JC 5D 9C AC 9S 6C
5
True
END

my $jvm = qq:to/END/;
2
3
6 2 2
2S 2C 2H 2D 3S 3C 3H 3D 4S 4C 4H 4D 5S 5C 5H 5D 6S 6C 6H 6D 7S 7C 7H 7D 8S 8C 8H 8D 9S 9C 9H 9D JS JC JH JD QS QC QH QD KS KC KH KD AS AC AH AD
5S
5D 2S JH KS AD
AD QH 5S 3D 2H JD 7H 2C 6S 3C 2D KC 3H 4S KD JS QC 4D 8C 7S 7D 9H 2S 4C KH QS 6D 5C 8H 9C 6H JH KS 6C JC 8S 5D AC 5H 7C 8D 9S 4H AH AS 9D QD 3S
4
False
END

use Test;
if $*VM ~~ /jvm/ {
is @res.join("\n"), chomp $jvm;
} else {
is @res.join("\n"), chomp $moar;
}

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Almost_prime
#c# 2016-01-11 <RC, 2018-05-21 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# swapped in alternate 'factors' routine (JVM was silently failing in code from 'Count_in_factors-1'

# Translation of: C
# Works with: Rakudo version 2015.12

# Here is a solution with identical output based on the factors routine from Count_in_factors#Perl_6 (to be included manually until we decide where in the distribution to put it).

#`{{
constant @primes = 2, |(3, 5, 7 ... *).grep: *.is-prime;

multi sub factors(1) { 1 }
multi sub factors(Int $remainder is copy) {
    gather for @primes -> $factor {
        # if remainder < factorÂ², we're done
        if $factor * $factor > $remainder {
            take $remainder if $remainder > 1;
            last;
        }
        # How many times can we divide by this prime?
        while $remainder %% $factor {
            take $factor;
            last if ($remainder div= $factor) === 1;
        }
    }
}

}}

sub factors($n is copy) {
    $n == 1 ?? 1 !!
    gather {
        $n /= take 2 while $n %% 2;
        $n /= take 3 while $n %% 3;
        loop (my $p = 5; $p*$p <= $n; $p+=2) {
            $n /= take $p while $n %% $p;
        }
        take $n unless $n == 1;
    }
}

constant @factory = lazy 0..* Z=> flat (0, 0, map { +factors($_) }, 2..*);

sub almost($n) { map *.key, grep *.value == $n, @factory }

my $ref = qq:to/END/;
2 3 5 7 11 13 17 19 23 29
4 6 9 10 14 15 21 22 25 26
8 12 18 20 27 28 30 42 44 45
16 24 36 40 54 56 60 81 84 88
32 48 72 80 108 112 120 162 168 176
END

my @res2.push: almost($_)[^10] for 1..5;
.put for @res2;

use Test;
is @res2.join("\n"), chomp $ref;

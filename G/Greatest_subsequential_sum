#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Greatest_subsequential_sum
#c# 2015-12-06 <RC
#m# MOAR: OK
#j#  JVM: OK

# Translation of: Python
# Works with: Rakudo version 2016.12
sub maxsubseq (*@a) {
    my ($start, $end, $sum, $maxsum) = -1, -1, 0, 0;
    for @a.kv -> $i, $x {
        $sum += $x;
        if $maxsum < $sum {
            ($maxsum, $end) = $sum, $i;
        }
        elsif $sum < 0 {
            ($sum, $start) = 0, $i;
        }
    }
    return @a[$start ^.. $end];
}

#`{
Another solution, not translated from any other language:
For each starting position, we calculate all the subsets starting at that position.
They are combined with the best subset ($max_subset) from previous loops, to form (@subsets).
The best of those @subsets is saved at the new $max_subset.
Consuming the array (.shift) allows us to skip tracking the starting point; it is always 0.
The empty sequence is used to initialize $max_subset, which fufills the "all negative" requirement of the problem.
Note that once the triangular comma bug is resolved, the inner-loop subset calculation line can be shortened to "my @subsets = [\,] @a;".
# DH 20170104 -- resolved & updated on RC by thundergnat++
}

sub max_sub-seq ( *@a ) {

    my $max_subset = [];
    while @a {
        #my @subsets = @a.keys.map: { [ @a[0..$_] ] };
        my @subsets = [\,] @a;
        @subsets.push($max_subset);
        $max_subset = @subsets.max: { [+] .list };
        @a.shift;
    }

    return $max_subset;
}

say my $out1 = maxsubseq( -1, -2,  3,  5,  6, -2, -1,  4, -4,  2, -1 );
say my $out2 = max_sub-seq( -1, -2,  3,  5,  6, -2, -1,  4, -4,  2, -1 );
say my $out3 = max_sub-seq( -2, -2, -1,  3,  5,  6, -1,  4, -4,  2, -1 );
say my $out4 = max_sub-seq( -2, -2, -1, -3, -5, -6, -1, -4, -4, -2, -1 );

my $ref1 = '3 5 6 -2 -1 4';
my $ref2 = '3 5 6 -1 4';

use Test;
is $out1, $ref1;
is $out2, $ref1;
is $out3, $ref2;
is $out4, '';

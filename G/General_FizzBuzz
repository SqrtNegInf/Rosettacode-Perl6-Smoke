#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/General_FizzBuzz
#c# 2018-03-21 <RC
#m# MOAR: OK
#j# JVM:  OK

# General case implementation of a "FizzBuzz" class.
# Defaults to standard FizzBuzz unless a new schema is passed in.

class FizzBuzz {
    has $.schema is rw = < 3 Fizz 5 Buzz >.hash;
    method filter (Int $this) {
        my $fb;
        for $.schema.sort: { +.key } -> $p { $fb ~= $this %% +$p.key ?? $p.value !! ''};
        return $fb || $this;
    }
}

# Sub implementing the specific requirements of the task.
sub GeneralFizzBuzz (Int $upto, @schema?) {
    my $ping = FizzBuzz.new;
    $ping.schema = @schema.hash if @schema;
    map { $ping.filter: $_ }, 1 .. $upto;
}

my @res;

# The task
@res.push: 'Using: 20 ' ~ <3 Fizz 5 Buzz 7 Baxx>;
@res.push: join ' ', GeneralFizzBuzz(20, <3 Fizz 5 Buzz 7 Baxx>);
@res.push: '';

@res.push: 'Same result via alternate algorithm:';
@res.push: genfizzbuzz1(20, <3 Fizz 5 Buzz 7 Baxx>);
@res.push: '';

# And for fun
@res.push: 'Using: 21 ' ~ <2 Pip 4 Squack 5 Pocketa 7 Queep>;
@res.push: join ', ', GeneralFizzBuzz(21, <2 Pip 4 Squack 5 Pocketa 7 Queep>);


#Here's the same program in a more functional idiom:

sub genfizzbuzz1($n, +@fb) {
    [Z~](
        do for @fb || <3 fizz 5 buzz> -> $i, $s {
            flat ('' xx $i-1, $s) xx *;
        }
    ) Z|| 1..$n
}

.say for @res;

my $ref = qq:to/END/;
Using: 20 3 Fizz 5 Buzz 7 Baxx
1 2 Fizz 4 Buzz Fizz Baxx 8 Fizz Buzz 11 Fizz 13 Baxx FizzBuzz 16 17 Fizz 19 Buzz

Same result via alternate algorithm:
1 2 Fizz 4 Buzz Fizz Baxx 8 Fizz Buzz 11 Fizz 13 Baxx FizzBuzz 16 17 Fizz 19 Buzz

Using: 21 2 Pip 4 Squack 5 Pocketa 7 Queep
1, Pip, 3, PipSquack, Pocketa, Pip, Queep, PipSquack, 9, PipPocketa, 11, PipSquack, 13, PipQueep, Pocketa, PipSquack, 17, Pip, 19, PipSquackPocketa, Queep
END

use Test;
is @res.join("\n"), chomp $ref;

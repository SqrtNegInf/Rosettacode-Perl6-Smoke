#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Graph_colouring
#c# 2020-03-12 <RC
#m# MOAR: OK
#j# JVM:  OK

srand 123456;

my @res;

sub GraphNodeColor(@RAW) {
   my %OneMany = my %NodeColor;
   for @RAW { %OneMany{$_[0]}.push: $_[1] ; %OneMany{$_[1]}.push: $_[0] }
   my @ColorPool = "0", "1" â€¦ ^+%OneMany.elems; # as string
   my %NodePool  = %OneMany.keys.SetHash;
   if %OneMany<NaN>:exists { # skip islanders for now
      %NodePool{$_}:delete for @(%OneMany<NaN>);
      %NodePool<NaN>:delete;
   }
   while %NodePool.Bool {
      my $color = @ColorPool.grab;
      my %TempPool = %NodePool;
      while (my \n = %TempPool.sort.pick.key) { # DH sort just for stable output
         %NodeColor{n} = $color;
         %TempPool{n}:delete;
         %TempPool{$_}:delete for @(%OneMany{n}) ; # skip neighbors as well
         %NodePool{n}:delete;
      }
   }
   if %OneMany<NaN>:exists { # islanders use an existing color
      %NodeColor{$_} = %NodeColor.sort.pick.value for @(%OneMany<NaN>) # DH sort just for stable output
   }
   return %NodeColor
}

my \DATA = [
   [<0 1>,<1 2>,<2 0>,<3 NaN>,<4 NaN>,<5 NaN>],
   [<1 6>,<1 7>,<1 8>,<2 5>,<2 7>,<2 8>,<3 5>,<3 6>,<3 8>,<4 5>,<4 6>,<4 7>],
   [<1 4>,<1 6>,<1 8>,<3 2>,<3 6>,<3 8>,<5 2>,<5 4>,<5 8>,<7 2>,<7 4>,<7 6>],
   [<1 6>,<7 1>,<8 1>,<5 2>,<2 7>,<2 8>,<3 5>,<6 3>,<3 8>,<4 5>,<4 6>,<4 7>],
];

for DATA {
   @res.push: "DATA   : "~ $_;
   @res.push: "Result : ";
   my %out = GraphNodeColor $_;
   @res.push: "$_[0]-$_[1]:\t Color %out{$_[0]} "~ ($_[1].isNaN ?? '' !! %out{$_[1]}) for @$_;
   @res.push: "Nodes  : "~ %out.keys.elems;
   @res.push: "Edges  : "~ $_.elems;
   @res.push: "Colors : "~ %out.values.Set.elems;
}

.say for @res;
exit;

my $ref = q:to/END/;
DATA   : [(0 1) (1 2) (2 0) (3 NaN) (4 NaN) (5 NaN)]
Result :
0-1:     Color 2 4
1-2:     Color 4 3
2-0:     Color 3 2
3-NaN:   Color 4
4-NaN:   Color 3
5-NaN:   Color 2
Nodes  : 6
Edges  : 6
Colors : 3
DATA   : [(1 6) (1 7) (1 8) (2 5) (2 7) (2 8) (3 5) (3 6) (3 8) (4 5) (4 6) (4 7)]
Result :
1-6:     Color 5 6
1-7:     Color 5 6
1-8:     Color 5 6
2-5:     Color 5 6
2-7:     Color 5 6
2-8:     Color 5 6
3-5:     Color 5 6
3-6:     Color 5 6
3-8:     Color 5 6
4-5:     Color 5 6
4-6:     Color 5 6
4-7:     Color 5 6
Nodes  : 8
Edges  : 12
Colors : 2
DATA   : [(1 4) (1 6) (1 8) (3 2) (3 6) (3 8) (5 2) (5 4) (5 8) (7 2) (7 4) (7 6)]
Result :
1-4:     Color 3 6
1-6:     Color 3 6
1-8:     Color 3 6
3-2:     Color 3 6
3-6:     Color 3 6
3-8:     Color 3 6
5-2:     Color 3 6
5-4:     Color 3 6
5-8:     Color 3 6
7-2:     Color 3 6
7-4:     Color 3 6
7-6:     Color 3 6
Nodes  : 8
Edges  : 12
Colors : 2
DATA   : [(1 6) (7 1) (8 1) (5 2) (2 7) (2 8) (3 5) (6 3) (3 8) (4 5) (4 6) (4 7)]
Result :
1-6:     Color 1 5
7-1:     Color 5 1
8-1:     Color 5 1
5-2:     Color 5 1
2-7:     Color 1 5
2-8:     Color 1 5
3-5:     Color 1 5
6-3:     Color 5 1
3-8:     Color 1 5
4-5:     Color 1 5
4-6:     Color 1 5
4-7:     Color 1 5
Nodes  : 8
Edges  : 12
Colors : 2
END

use Test;
is @res.join("\n"), chomp $ref;

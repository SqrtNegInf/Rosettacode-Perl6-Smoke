#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Huffman_coding
#c# 2015-11-06 <RC
#m# MOAR: OK
#j#  JVM: OK

#use MONKEY-SEE-NO-EVAL;

# Works with: rakudo version 2015-09-14
sub huffman ($s) {
    my $de = $s.chars;
    my @q = $s.comb.classify({$_}).map({[+.value / $de, .key]}).sort;
    while @q > 1 {
	my ($a,$b) = @q.splice(0,2);
	@q = sort flat $[$a[0] + $b[0], [$a[1], $b[1]]], @q;
    }
    sort *.value, gather walk @q[0][1], '';
}

multi walk (@node, $prefix) {
    walk @node[0], $prefix ~ 1;
    walk @node[1], $prefix ~ 0;
}
multi walk ($node, $prefix) { take $node => $prefix }

say .raku for huffman('this is an example for huffman encoding');

#To demonstrate that the table can do a round trip:

my $str = 'this is an example for huffman encoding';
my %enc = huffman $str;
my %dec = %enc.invert;
say $str;
my $huf = %enc{$str.comb}.join;
say $huf;
my $rx = join '|', map { "'" ~ .key ~ "'" }, %dec;
#$rx = EVAL '/' ~ $rx ~ '/';
$rx = "/$rx/".EVAL;
#say my $rt = $huf.subst(/<$rx>/, -> $/ {%dec{~$/}}, :g);
say my $rt = $huf.subst(/<$rx>/, {%dec{~$/}}, :g);

use Test;
is $rt, $str, 'round-trip';

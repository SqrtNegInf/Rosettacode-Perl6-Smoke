#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Hilbert_curve
#c# 2018-04-24 <RC
#t# graphical
#m# MOAR: OK
#j# JVM:  OK
#f# RC file: hilbert_curve.svg

# Works with: Rakudo version 2018.03
use SVG;

my $fh = open("run/hilbert_curve.svg", :w) || die;
 
role Lindenmayer {
    has %.rules;
    method succ {
	    self.comb.map( { %!rules{$^c} // $c } ).join but Lindenmayer(%!rules)
    }
}
 
my $hilbert = 'A' but Lindenmayer( { A => '-BF+AFA+FB-', B => '+AF-BFB-FA+' } );
 
$hilbert++ xx 7;
my @points = (647, 13);
 
for $hilbert.comb -> $v {
    state ($x, $y) = @points[0,1];
    state $d = -5 - 0i;
    with $v {
        when 'F' { @points.append: ($x += $d.re).round(.01), ($y += $d.im).round(.01) }
        when /< + - >/ { $d *= "{$v}1i" }
        default { }
    }
}
 
$fh.say: SVG.serialize(
    svg => [
        width => 660, height => 660, style => 'stroke:rgb(0,0,198)',
        :rect[:width<100%>, :height<100%>, :fill<white>],
        :polyline[ :points(@points.join: ','), :fill<white> ],
    ],
);

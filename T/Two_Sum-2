#!/usr//bin/env perl6
#u# http://rosettacode.org/wiki/Two_Sum
#c# 2019-03-10 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# terminally indecisive, wrote both left-to-right and right-to-left functional processing
#n# 2nd routine sub-obtimal: why do I need to 'coerce' to hash with '%'?

sub two-sum-lr (@a, $sum) {
    # (((^@a X ^@a) Z=> (@a X+ @a)).grep($sum == *.value)>>.key.map:{ .split(' ').sort.join(' ')}).unique
    (
     (
      (^@a X ^@a) Z=> (@a X+ @a)
     ).grep($sum == *.value)>>.keys
     .map:{ .split(' ').sort.join(' ')}
    ).unique
}

sub two-sum-rl (@a, $sum) {
    # unique map {.split(' ').sort.join(' ')}, keys %(grep {.value == $sum}, %((^@a X ^@a) Z=> (@a X[+] @a)))
    unique 
    map {.split(' ').sort.join(' ')},
    keys %(
     grep {.value == $sum}, %(
      (^@a X ^@a) Z=> (@a X[+] @a)
     )
    )
}

my @a = <0 2 11 19 90>; 
for 21, 25 {
    say two-sum-rl(@a,$_);
    say two-sum-lr(@a,$_);
}

my @res.push: two-sum-lr(@a,$_), two-sum-rl(@a,$_) for 21, 25;

my $ref = qq:to/END/;
1 3
1 3


END

use Test;
is @res.join("\n"), chomp $ref;

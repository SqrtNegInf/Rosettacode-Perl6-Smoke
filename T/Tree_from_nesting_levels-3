#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Tree_from_nesting_levels
#c# 2021-02-07 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# String Eval

my @res;

use MONKEY-SEE-NO-EVAL;

sub to_tree_string_eval ( @xs --> Array ) {
    my @gap = [ |@xs, 0 ]  Z-  [ 0, |@xs ];

    my @open  = @gap.map( '[' x  * );
    my @close = @gap.map( ']' x -* );

    my @wrapped = [Z~] @open, @xs, @close.skip;

    return EVAL @wrapped.join(',').subst(:g, ']]', '],]') || '[]';
}

my @tests = (), (1, 2, 4), (3, 1, 3, 1), (1, 2, 3, 1), (3, 2, 1, 3), (3, 3, 3, 1, 1, 3, 3, 3);
@res.push: .Str.fmt( '%15s => ' ) ~ .&to_tree_string_eval.gist for @tests;

.say for @res;

my $ref = q:to/END/;
                => []
          1 2 4 => [1 [2 [[4]]]]
        3 1 3 1 => [[[3]] 1 [[3]] 1]
        1 2 3 1 => [1 [2 [3]] 1]
        3 2 1 3 => [[[3] 2] 1 [[3]]]
3 3 3 1 1 3 3 3 => [[[3 3 3]] 1 1 [[3 3 3]]]
END

use Test;
is @res.join("\n"), chomp $ref;

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Latin_Squares_in_reduced_form
#c# 2019-12-xx >RC
#m# MOAR: OK
#j#  JVM: OK
#n# performance issues: fine for 4/5, but impossibly slow for 6 (hyper tweak not enough, need good prune)
#n# open question: is check #2 100% effective? (having not yet gotten results for n=6) [updated: No!]

my @res;

# utilities: factorial, sub-factorial, derangements
constant factorial = 1, |[\*] 1..*;
sub prefix:<!>(Int $n) { (1, 0, 1, -> $a, $b { ($++ + 2) Ã— ($b + $a) } ... *)[$n] }
sub derangements(@l) { @l.permutations.grep(-> @p { none(@p Zeqv @l) }) }

my $n = 4;
my @l = 1 X+ ^$n;

#my %D = derangements(@l).classify: *.[0], :as(*.Array);
my %D = derangements(@l).classify(*.[0]); # list

# ([X] (^(!$n/($n-1))) xx $n-1).race.map: -> $tuple {
for [X] (^(!$n/($n-1))) xx $n-1 -> $tuple {
    my @candidate = @l, | map { %D{$_}[$tuple[$_-2]] }, 2 .. $n;
    next unless [==] [Z+] @candidate;                                                       # check 1: equal column sums
    next if [or] (flat @candidate[0..$n-2]>>.Array) Z== flat @candidate[1..$n-1]>>.Array;   # check 2: no repeats in next row

    #@res.push: join(' : ', @candidate);          # display as one line 
    @res.push: join("\n", @candidate) ~ "\n";   # or as square
}

#say +@res; exit;
.say for @res;

my @x = <0 1 1 1 4 56 9408>;
@res.push: sprintf "Order $_: Size %-4d x $_! x {$_-1}! => Total %d", @x[$_], @x[$_] * factorial[$_] * factorial[$_-1] for 1..6;

my $ref = q:to/END/;
1 2 3 4
2 1 4 3
3 4 1 2
4 3 2 1

1 2 3 4
2 1 4 3
3 4 2 1
4 3 1 2

1 2 3 4
2 3 4 1
3 4 1 2
4 1 2 3

1 2 3 4
2 4 1 3
3 1 4 2
4 3 2 1

Order 1: Size 1    x 1! x 0! => Total 1
Order 2: Size 1    x 2! x 1! => Total 2
Order 3: Size 1    x 3! x 2! => Total 12
Order 4: Size 4    x 4! x 3! => Total 576
Order 5: Size 56   x 5! x 4! => Total 161280
Order 6: Size 9408 x 6! x 5! => Total 812851200
END

use Test;
is @res.join("\n"), chomp $ref;

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Line_circle_intersection
#c# 2020-03-09 <RC, 2020-03-11 >RC
#m# MOAR: OK
#j# JVM:  OK

my @res;
sub LineCircularOBJintersection(@P1, @P2, @Centre, \Radius) {
   my @d = @P2 »-« @P1 ;           # d
   my @f = @P1 »-« @Centre ;       # c

   my \a = [+] @d»²;               # d dot d
   my \b = 2 × ([+] @f »×« @d);    # 2 × f dot d
   my \c = ([+] @f»²) - Radius²;   # f dot f - r²
   my \Δ =  b²-(4×a×c);            # discriminant

   if Δ < 0 {
      return; # [];
   } else {
      my (\t1,\t2) = (-b - Δ.sqrt)/(2×a), (-b + Δ.sqrt)/(2×a);
      #if ( t1 ≥ 0 and t1 ≤ 1 ) or ( t2  ≥ 0 and t2  ≤ 1 ) {
      if 0 ≤ t1|t2 ≤ 1 {
        #return @P1 »+« ( @P2 »-« @P1 ) »×» t1, @P1 »+« ( @P2 »-« @P1 ) »×» t2 # original
        #return (@P1 xx 2) »+« (( @P2 »-« @P1 ) xx 2) »×» (t1, t2);            # duplicate elements
        #return map { @P1 »+« (@P2 »-« @P1) »×» $_ }, t1, t2;                  # use 'map'
         return (t1,t2).map: @P1 »+« (@P2 »-« @P1) »×» *;                      # use 'map', items that vary up front
      } else {
         return []
      }
   }
}

my \DATA = [
   [ <-10 11>, < 10 -9>, <3 -5>, 3 ],
   [ <-10 11>, <-11 12>, <3 -5>, 3 ],
   [ <  3 -2>, <  7 -2>, <3 -5>, 3 ],
   [ <  3 -2>, <  7 -2>, <0  0>, 4 ],
   [ <  0 -3>, <  0  6>, <0  0>, 4 ],
   [ <  6  3>, < 10  7>, <4  2>, 5 ],
   [ <  7  4>, < 11 18>, <4  2>, 5 ],
   [ <5  2 −2.26 >, <0.77 2 4>, <1 4 0>, 4 ]
];

for DATA {
   my @solution = LineCircularOBJintersection $_[0] , $_[1] , $_[2], $_[3];
   @res.push: "For data set: "~ $_;
   @res.push: "Solution(s) is/are: "~ (@solution.Bool ?? @solution !! "None");
}

.say for @res;

my $ref = q:to/END/;
For data set: -10 11 10 -9 3 -5 3
Solution(s) is/are: 3 -2 6 -5
For data set: -10 11 -11 12 3 -5 3
Solution(s) is/are: None
For data set: 3 -2 7 -2 3 -5 3
Solution(s) is/are: 3 -2 3 -2
For data set: 3 -2 7 -2 0 0 4
Solution(s) is/are: -3.4641016151377544 -2 3.4641016151377544 -2
For data set: 0 -3 0 6 0 0 4
Solution(s) is/are: 0 -4 0 4
For data set: 6 3 10 7 4 2 5
Solution(s) is/are: 1 -2 8 5
For data set: 7 4 11 18 4 2 5
Solution(s) is/are: 5.030680985703315 -2.892616550038399 7.459885052032535 5.60959768211387
For data set: 5 2 −2.26 0.77 2 4 1 4 0 4
Solution(s) is/are: 4.2615520237084015 2 -1.1671668246843006 1.13386504516801 2 3.461514141193441
END

use Test;
is @res.join("\n"), chomp $ref;

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Longest_common_prefix
#c# 2015-11-28 <>RC
#m# MOAR: OK
#j#  JVM: OK

# Works with: rakudo version 2015-03-26 

#`{ 
This should work on infinite strings (if and when we get them), since .ords
is lazy. In any case, it does just about the minimal work by evaluating all
strings lazily in parallel. A few explanations of the juicy bits: @s is the
list of strings, and the hyper operator » applies the .ords to each of
those strings, producing a list of lists. The | operator inserts each of
those sublists as an argument into an argument list so that we can use a
reduction operator across the list of lists, which makes sense if the
operator in question knows how to deal with list arguments. In this case we
use the Z ('zip') metaoperator with eqv as a base operator, which runs eqv
across all the lists in parallel for each position, and will fail if not
all the lists have the same ordinal value at that position, or if any of
the strings run out of characters. Then we count up the matching
positions and carve up one of the strings to that length.
}

multi lcp()    { '' }
multi lcp($s)  { ~$s }
multi lcp(*@s) { substr @s[0], 0, [+] [\and] [Zeqv] |@s».ords }
#multi lcp(*@s) { substr @s[0], 0, first - index *.not, [Zeqv] |@s».ords }

use Test;
plan 8;

is lcp(''), '';
is lcp(), '';
is lcp("interspecies","interstellar","interstate"), "inters";
is lcp("throne","throne"), "throne";
is lcp("throne","dungeon"), '';
is lcp("cheese"), "cheese";
is lcp("foo","foobar"), 'foo';
is lcp("prefix","suffix"), '';

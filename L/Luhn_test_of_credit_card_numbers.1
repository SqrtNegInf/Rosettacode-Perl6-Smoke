#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Luhn_test_of_credit_card_numbers
#c# 2015-12-05 <>RC
#m# MOAR: OK
#j#  JVM: OK

#Here we make use of comb, which splits into individual characters,
#and the sequence operator ..., which can intuit an even or odd sequence from the first two values.
#The [+] is a reduction metaoperator; with + it just sums the list of values.
#%% is the divisible-by operator.

sub luhn-test ($cc-number --> Bool) {
    my @digits = $cc-number.comb.reverse;
    my $s1 = [+] @digits[0,2...@digits.end];
    my $s2 = [+] @digits[1,3...@digits.end].map({[+] ($^a * 2).comb});

    return ($s1 + $s2) %% 10;
}

use Test;

my %cc-numbers =
    '49927398716'       => True,
    '49927398717'       => False,
    '1234567812345678'  => False,
    '1234567812345670'  => True;

plan %cc-numbers.elems;

for %cc-numbers.kv -> $cc, $expected-result {
    is luhn-test(+$cc), $expected-result, 
        "$cc {$expected-result?? 'passes'!! 'does not pass'} the Luhn test.";
}

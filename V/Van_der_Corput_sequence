#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Van_der_Corput_sequence
#c# 2015-11-01 <RC, 2020-08-26 >RC
#m# MOAR: OK
#j#  JVM: OK

use Test;

#First a cheap implementation in base 2, using string operations.
constant VdC = map { :2("0." ~ .base(2).flip) }, ^Inf;
.say for VdC[^10];
is (join ' ', VdC[^16]), '0 0.5 0.25 0.75 0.125 0.625 0.375 0.875 0.0625 0.5625 0.3125 0.8125 0.1875 0.6875 0.4375 0.9375';

#Here is a more elaborate version using the polymod built-in integer method:
sub VdC($base = 2) {
    map {
        [+] $_ && .polymod($base xx *) Z/ [\×] $base xx *
    }, ^Inf
}

.say for VdC[^10];
is (join ' ', VdC[^16]), '0 0.5 0.25 0.75 0.125 0.625 0.375 0.875 0.0625 0.5625 0.3125 0.8125 0.1875 0.6875 0.4375 0.9375';

#Here is a fairly standard imperative version in which we mutate three variables in parallel:

sub vdc($num, $base = 2) {
    my $n = $num;
    my $vdc = 0;
    my $denom = 1;
    while $n {
        $vdc += $n mod $base / ($denom ×= $base);
        $n div= $base;
    }
    $vdc;
}

say '=========================';
for 2..5 -> $b {
    say "Base $b";
    #say (vdc($_,$b) for ^10).raku;
    say ( vdc($_,$b).Rat.nude.join('/') for ^10 ).join(', ');
    say '';
}

is (vdc($_,2) for ^10).raku, '(0, 0.5, 0.25, 0.75, 0.125, 0.625, 0.375, 0.875, 0.0625, 0.5625)';
is (vdc($_,5) for ^10).raku, '(0, 0.2, 0.4, 0.6, 0.8, 0.04, 0.24, 0.44, 0.64, 0.84)';

# Here is a functional version:

sub vdcX($value, $base = 2) {
    my @values = $value, { $_ div $base } ... 0;
    my @denoms = $base,  { $_  ×  $base } ... *;
    [+] do for (flat @values Z @denoms) -> $v, $d {
#    [+] do for @(gather (@values Z @denoms).deepmap(*.take)) -> $v, $d {
        $v mod $base / $d;
    }
}

is (vdcX($_,2) for ^10).raku, '(0.0, 0.5, 0.25, 0.75, 0.125, 0.625, 0.375, 0.875, 0.0625, 0.5625)';
is (vdcX($_,5) for ^10).raku, '(0.0, 0.2, 0.4, 0.6, 0.8, 0.04, 0.24, 0.44, 0.64, 0.84)';

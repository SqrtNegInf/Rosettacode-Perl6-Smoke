#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Verify_distribution_uniformity/Naive
#c# 2016-06-12 <RC
#m# MOAR: OK
#j#  JVM: OK

srand 123456;

# Since the tested function is rolls of a 7 sided die, the test numbers are magnitudes of 10x bumped up to the closest multiple of 7. This reduces spurious error from there not being an integer expected value.

my $d7 = 1..7;
sub roll7 { $d7.roll };

my $threshold = 3;

for 14, 105, 1001, 10003, 100002, 1000006 ->  $n
  { dist( $n, $threshold,  &roll7 ) };


my @res;
sub dist ( $n is copy, $threshold, &producer ) {
    my @dist;
    my $expect = $n / 7;
    @res.push: sprintf "Expect\t%.3f", $expect;

    loop ($_ = $n; $n; --$n) { @dist[&producer()]++; }

    for @dist.kv -> $i, $v is copy {
        next unless $i;
        $v //= 0;
        my $pct = ($v - $expect)/$expectÃ—100;
        @res.push: sprintf "%d\t%d\t%+.2f%% %s", $i, $v, $pct,
          ($pct.abs > $threshold ?? '- skewed' !! '');
    }
}

.say for @res;

my $moar = qq:to/END/;
Expect	2.000
1	1	-50.00% - skewed
2	2	+0.00% 
3	1	-50.00% - skewed
4	2	+0.00% 
5	1	-50.00% - skewed
6	2	+0.00% 
7	5	+150.00% - skewed
Expect	15.000
1	10	-33.33% - skewed
2	16	+6.67% - skewed
3	12	-20.00% - skewed
4	15	+0.00% 
5	18	+20.00% - skewed
6	13	-13.33% - skewed
7	21	+40.00% - skewed
Expect	143.000
1	147	+2.80% 
2	133	-6.99% - skewed
3	125	-12.59% - skewed
4	148	+3.50% - skewed
5	137	-4.20% - skewed
6	157	+9.79% - skewed
7	154	+7.69% - skewed
Expect	1429.000
1	1451	+1.54% 
2	1422	-0.49% 
3	1366	-4.41% - skewed
4	1454	+1.75% 
5	1424	-0.35% 
6	1438	+0.63% 
7	1448	+1.33% 
Expect	14286.000
1	14395	+0.76% 
2	14117	-1.18% 
3	14436	+1.05% 
4	14265	-0.15% 
5	14447	+1.13% 
6	14083	-1.42% 
7	14259	-0.19% 
Expect	142858.000
1	142812	-0.03% 
2	143229	+0.26% 
3	142355	-0.35% 
4	142857	-0.00% 
5	142989	+0.09% 
6	142969	+0.08% 
7	142795	-0.04% 
END

my $moar-old = qq:to/END/;
Expect	2.000
1	5	+150.00% - skewed
2	0	-100.00% - skewed
3	1	-50.00% - skewed
4	0	-100.00% - skewed
5	1	-50.00% - skewed
6	1	-50.00% - skewed
7	6	+200.00% - skewed
Expect	15.000
1	15	+0.00% 
2	21	+40.00% - skewed
3	16	+6.67% - skewed
4	13	-13.33% - skewed
5	19	+26.67% - skewed
6	11	-26.67% - skewed
7	10	-33.33% - skewed
Expect	143.000
1	138	-3.50% - skewed
2	173	+20.98% - skewed
3	149	+4.20% - skewed
4	129	-9.79% - skewed
5	145	+1.40% 
6	125	-12.59% - skewed
7	142	-0.70% 
Expect	1429.000
1	1392	-2.59% 
2	1420	-0.63% 
3	1427	-0.14% 
4	1416	-0.91% 
5	1472	+3.01% - skewed
6	1503	+5.18% - skewed
7	1373	-3.92% - skewed
Expect	14286.000
1	14248	-0.27% 
2	14443	+1.10% 
3	14109	-1.24% 
4	14352	+0.46% 
5	14299	+0.09% 
6	14238	-0.34% 
7	14313	+0.19% 
Expect	142858.000
1	142539	-0.22% 
2	142639	-0.15% 
3	142899	+0.03% 
4	143198	+0.24% 
5	142595	-0.18% 
6	143292	+0.30% 
7	142844	-0.01% 
END

my $jvm = qq:to/END/;
Expect	2.000
1	2	+0.00% 
2	3	+50.00% - skewed
3	1	-50.00% - skewed
4	2	+0.00% 
5	0	-100.00% - skewed
6	2	+0.00% 
7	4	+100.00% - skewed
Expect	15.000
1	13	-13.33% - skewed
2	19	+26.67% - skewed
3	23	+53.33% - skewed
4	18	+20.00% - skewed
5	12	-20.00% - skewed
6	11	-26.67% - skewed
7	9	-40.00% - skewed
Expect	143.000
1	155	+8.39% - skewed
2	136	-4.90% - skewed
3	146	+2.10% 
4	132	-7.69% - skewed
5	158	+10.49% - skewed
6	142	-0.70% 
7	132	-7.69% - skewed
Expect	1429.000
1	1443	+0.98% 
2	1463	+2.38% 
3	1389	-2.80% 
4	1390	-2.73% 
5	1498	+4.83% - skewed
6	1397	-2.24% 
7	1423	-0.42% 
Expect	14286.000
1	14332	+0.32% 
2	14263	-0.16% 
3	14364	+0.55% 
4	14346	+0.42% 
5	14215	-0.50% 
6	14247	-0.27% 
7	14235	-0.36% 
Expect	142858.000
1	142733	-0.09% 
2	142788	-0.05% 
3	142821	-0.03% 
4	142944	+0.06% 
5	142983	+0.09% 
6	142931	+0.05% 
7	142806	-0.04% 
END

use Test;
my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is @res.join("\n"), chomp $ref;

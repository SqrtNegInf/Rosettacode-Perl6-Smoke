#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Array_search
#c# 2015-12-03 <>RC
#m# MOAR: OK
#j#  JVM: OK
#n# easy to bypass module, with direct array assignment 

# There are several search operations that may be used. It mostly depends on
# whether you want to find actual values or pointers, and/or all possible
# values or a single value matching your criteria. The most appropriate for
# the given test data/operations are shown here.

#use JSON::Tiny;
#
#my $cities = 
#[{"name":"Lagos", "population":21}, {"name":"Cairo", "population":15.2}, {"name":"Kinshasa-Brazzaville", "population":11.3}, {"name":"Greater Johannesburg", "population":7.55}, {"name":"Mogadishu", "population":5.85}, {"name":"Khartoum-Omdurman", "population":4.98}, {"name":"Dar Es Salaam", "population":4.7}, {"name":"Alexandria", "population":4.58}, {"name":"Abidjan", "population":4.4}, {"name":"Casablanca", "population":3.98}];
#');

my $cities = 
$[{:name("Lagos"), :population(21)}, {:name("Cairo"), :population(15.2)}, {:name("Kinshasa-Brazzaville"), :population(11.3)}, {:name("Greater Johannesburg"), :population(7.55)}, {:name("Mogadishu"), :population(5.85)}, {:name("Khartoum-Omdurman"), :population(4.98)}, {:name("Dar Es Salaam"), :population(4.7)}, {:name("Alexandria"), :population(4.58)}, {:name("Abidjan"), :population(4.4)}, {:name("Casablanca"), :population(3.98)}];

# Find the indicies of the cities named 'Dar Es Salaam'.
say my $res1 = grep { $_<name> eq 'Dar Es Salaam'}, :k, @$cities;

# Find the name of the first city with a population less
# than 5 when sorted by population, largest to smallest.
say my $res2 = ($cities.sort( -*.<population> ).first: *.<population> < 5)<name>;


# Find all of the city names that contain an 'm' 
say my $res3 = join ', ', sort grep( {$_<name>.lc ~~ /'m'/}, @$cities )Â»<name>;

use Test;
is $res1, '6';
is $res2, 'Khartoum-Omdurman';
is $res3, 'Dar Es Salaam, Khartoum-Omdurman, Mogadishu';

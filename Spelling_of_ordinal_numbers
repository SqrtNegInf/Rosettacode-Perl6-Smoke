#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Spelling_of_ordinal_numbers
#c# 2017-09-07 <RC
#m# MOAR: OK
#j# JVM:  BROKEN

die 'ecosystem...' if $*VM ~~ /jvm/;  # wait for zef-j

# Works with: Rakudo version 2017.08

#`{ 
This would be pretty simple to implement from scratch; it would be
pretty straightforward to do a minor modification of the  Number names task
code. Much simpler to use Lingua::EN::Numbers::Cardinal module from the
Perl 6 ecosystem though. It easily handles ordinal numbers even though that
is not its primary focus.  We need to be slightly careful of terminology.
In Perl 6, 123, 00123.0, & 1.23e2 are not all integers. They are
respectively an Int (integer), a Rat (rational number) and a Num (floating
point number). For this task it doesn't much matter as the ordinal routine
coerces its argument to an Int, but to Perl 6 they are different things
even though they all evaluate to the string 123.  It is not really clear
what is meant by "Write a driver and a function...". Well, the function
part is clear enough; driver not so much. Perhaps this will suffice.
}

use Lingua::EN::Numbers::Cardinal;
 
my @res.push: sprintf( "\%16s : %s", $_, ordinal($_) ) for
 
# Required tests
|<1 2 3 4 5 11 65 100 101 272 23456 8007006005004003>,
 
# Optional tests
|<123 00123.0 1.23e2>;

.say for @res;

my $ref = qq:to/END/;
               1 : first
               2 : second
               3 : third
               4 : fourth
               5 : fifth
              11 : eleventh
              65 : sixty-fifth
             100 : one hundredth
             101 : one hundred first
             272 : two hundred seventy-second
           23456 : twenty-three thousand, four hundred fifty-sixth
8007006005004003 : eight quadrillion, seven trillion, six billion, five million, four thousand third
             123 : one hundred twenty-third
         00123.0 : one hundred twenty-third
          1.23e2 : one hundred twenty-third
END

use Test;
is @res.join("\n"), chomp $ref;

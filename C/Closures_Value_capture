#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Closures/Value_capture
#c# 2015-12-20 <RC
#m# MOAR: OK
#j#  JVM: OK

srand 123456;

#All blocks are anonymous closures in Perl 6, and parameters are lexicals, so it's easy to generate a list of them. We'll use a gather/take generator loop, and call the closures in random order, just to keep things interesting.

my @c = gather for ^10 -> $i {
    take { $i × $i }
}

my @res1.push: .() for @c.pick(*);  # call them in random order
.say for @res1;

#Or equivalently, using a more functional notation:

srand 123456;

my @res2.push: .() for pick *, map -> $i { -> {$i × $i} }, ^10;
#.say for @res2;

my $moar = qq:to/END/;
36
4
25
16
9
0
64
1
81
49
END

my $jvm = qq:to/END/;
16
64
4
81
0
49
1
9
36
25
END

use Test;

if $*VM ~~ /jvm/ {
is @res1.join("\n"), chomp $jvm;
is @res2.join("\n"), chomp $jvm;
} else {
is @res1.join("\n"), chomp $moar;
is @res2.join("\n"), chomp $moar;
}

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Comments
#c# 2016-01-01 <RC, 2019-09-30 <RC
#m# MOAR: OK
#j# JVM:  OK

my @res;

# Single-line comments
# A single-line comment starts with # and extends to the end of the line.

# the answer to everything
my $x = 42;

# Multi-line comments
# A multi-line comment starts with #` and followed by the commented text enclosed by bracketing characters (e.g., (), [], {}, 「」, etc.).

#`( 
    Comments beginning with a backtick and one or more opening bracketing characters are embedded comments.
    They can span more than one line…
)

my $y = #`{ …or only part of a line. } 3;

# Multi-line comments can also be embedded into code.

my @array = <1 2 3>;

for #`(each element in) @array {
    @res.push: #`(or print element) $_ #`(with a newline);
}

# Using more than one bracketing character lets you include an unmatched close bracket, as shown below.

#`{{
  This close curly brace } won't terminate the comment early.
}}

# Pod comments

=begin comment

Pod is the successor to Perl 5's POD. This is the simplest way to use it for multi-line comments.
For more about Pod, see Pod: https://docs.perl6.org/language/pod

=end comment

# Pod also provides declarator blocks which are special comments that attach to some source code and can be extracted as documentation. They are either #| or #= and must be immediately followed by either a space or an opening curly brace. In short, blocks starting with #| are attached to the code after them, and blocks starting with #= are attached to the code before them.

#| Compute the distance between two points in the plane.
sub distance(
    Rat \x1, #= First point's abscissa,
    Rat \y1, #= First point's ordinate, 
    Rat \x2, #= Second point's abscissa, 
    Rat \y2, #= Second point's ordinate, 
){
    return sqrt((x2 - x1)**2 + (y2 - y1)**2)
}

@res.push: distance(1/3,-1/3,2/3,-4/5);

.say for @res;

my $ref = q:to/END/;
1
2
3
0.5734883511361751
END

use Test;
is $x, 42;
is $y, 3;
is @res.join("\n"), chomp $ref;

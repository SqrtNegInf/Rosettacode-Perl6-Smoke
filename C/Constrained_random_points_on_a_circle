#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Constrained_random_points_on_a_circle
#c# 2016-01-09 <RC, 2018-12-03 >RC
#m# MOAR: OK
#j#  JVM: OK
#f# RC file: constrained_random_points.BEND
#n# unstable, depending on placement of 'srand'? [NB: 'ENTER srand 123456' solves that]

srand 123456;

my $ext = $*VM ~~ /jvm/ ?? 'jvm' !! 'moar';
my $out = open("run/constrained_random_points.$ext", :w);

my @range = -15..16;

my @points = gather for @range X @range -> ($x, $y) {
    take [$x,$y] if 10 <= sqrt($x×$x+$y×$y) <= 15
}
my @samples = @points.roll(100); # or .pick(100) to get distinct points

my %matrix;
for @range X @range -> ($x, $y) { %matrix{$y}{$x} = ' ' }
%matrix{.[1]}{.[0]} = '*' for @samples;
$out.say: %matrix{$_}{@range}.join(' ') for @range;

#Turning that program completely inside-out and reducing to a single statement with a single non-parameter variable, we get this version, which also works:

($out.say: ~.map: { $_ // ' ' } for my @matrix) given do
    -> [$x, $y] { @matrix[$x][$y] = '*' } for pick 100, do
        for ^32 X ^32 -> ($x, $y) {
            [$x,$y] when 100..225 given [+] ($x,$y X- 15) X**2;
        }

$out.close;

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Chat_server
#c# 2016-08-13 <RC
#t# interactive
#m# MOAR: OK
#j#  JVM: OK

#Translation of: Python (or at least started out that way)
# Works with: Rakudo version 2016.07

react {
    my %connections;

    whenever IO::Socket::Async.listen('localhost', 4004) -> $conn {
        my $name;

        $conn.print: "Please enter your name: ";

        whenever $conn.Supply.lines -> $message {
            if !$name {
                if %connections{$message} {
                    $conn.print: "Name already taken, choose another one: ";
                }
                else {
                    $name = $message;
                    %connections{$name} = $conn;
                    broadcast "+++ %s arrived +++", $name;
                }
            }
            else {
                broadcast "%s> %s", $name, $message;
            }
            LAST {
                broadcast "--- %s left ---", $name;
                %connections{$name}:delete;
                $conn.close ;
            }
            QUIT {
                 default {
                     say "oh no, $_";
                }
            }
        }
    }

    sub broadcast ($format, $from, *@message) {
        my $text = sprintf $format, $from, |@message;
        say $text;
        for %connections.kv -> $name, $conn {
            $conn.print: "$text\n" if $name ne $from;
        }
    }
}

#`{
Notes:

 It operates asynchronously (using IO::Socket::Async), so a slow connection to one client won't affect other clients.
 It accepts messages encoded in UTF-8.
 It tokenizes the message streams at newline boundaries (using the Supply.lines method), which I think makes the most sense for a chat application.

 TODO:
Once »this Rakudo bug« is resolved, make sure to catch UTF8-invalid messages.
}

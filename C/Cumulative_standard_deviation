#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Cumulative_standard_deviation
#c# 2016-08-24 <RC
#m# MOAR: OK
#j#  JVM: OK

# Works with: Rakudo Star version 2010.08

# Using a closure:
sub sd (@a) {
    my $mean = @a R/ [+] @a;
    sqrt @a R/ [+] map (* - $mean)**2, @a;
}

sub sdaccum {
    my @a;
    return { push @a, $^x; sd @a; };
}

my &f = sdaccum;
my @r1;
push @r1, (f $_).round(.000000000000001) for 2, 4, 4, 4, 5, 5, 7, 9;

# Using a state variable:
# remember that <(x-<x>)²> = <x²> - <x>²
sub stddev($x) {
    sqrt
        (.[2] += $x**2) / ++.[0] -
        ((.[1] += $x) / .[0])**2
    given state @;
}

my @r2;
push @r2, (stddev $_).round(.000000000000001) for <2 4 4 4 5 5 7 9>;

my @ref = <
0
1
0.942809041582063
0.866025403784439
0.979795897113271
1
1.39970842444753
2
>;

use Test;
is @r1, @ref;
is @r2, @ref;

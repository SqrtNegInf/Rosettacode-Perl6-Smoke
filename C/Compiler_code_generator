#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Compiler/code_generator
#t# inprogress
#c# 2019-12-11 >RC
#m# MOAR: OK
#j#  JVM: OK

my $result;

my @CODE = split /\n/, q:to/EOD/;
Sequence
Sequence
;
Assign
Identifier    count
Integer       1
While
Less
Identifier    count
Integer       10
Sequence
Sequence
;
Sequence
Sequence
Sequence
;
Prts
String        "count is: "
;
Prti
Identifier    count
;
Prts
String        "\n"
;
Assign
Identifier    count
Add
Identifier    count
Integer       1
EOD

my (%strings, %names);
my $stringcount = my $namecount = my $pairsym = my $pc = 0;
my %opnames = <
    Less            lt
    LessEqual       le
    Multiply        mul
    Subtract        sub
    Divide          div
    GreaterEqual    ge
    Equal           eq
    Greater         gt
    NotEqual        ne
    Negate          neg
>;

sub tree {
    my ($A, $B) = ( '_' ~ ++$pairsym, '_' ~ ++$pairsym ); # labels for jumps
    my $line = @CODE.shift // return '';
    $line ~~ /^ (\w+|';') [\s+ (.*)]? /; # or die "bad input $line";
    my ($glorp, $arg) = ($0, $1);
    given $glorp {
        when 'Identifier' {  "fetch [{%names{$arg} //= $namecount++ }]\n" }
        when 'Sequence'   {  tree() ~ tree() }
        when 'Integer'    {  "push  $arg\n" }
        when 'String'     {  "push  { %strings{$arg} //= $stringcount++ }\n" }
        when 'Assign'     {  join '', reverse ((tree()).subst( /fetch/, 'store')), tree() }
        when 'While'      {  "$A:\n{ tree() }jz    $B\n{ tree() }jmp   $A\n$B:\n" }
        when 'If'         {  tree() ~ "jz    $A\n{ !@CODE.shift ~ tree()}jmp   $B\n$A:\n{ tree() }$B:\n" }
        when ';'          {  '' }
        default           {  tree() ~ tree() ~ (%opnames{$glorp} // $glorp.lc) ~ "\n" }  # .lc?
    }
}

say my $floop = tree() ~ "halt\n";
exit;
 
#`{{
 
$floop ~~ s:g/^jmp\s+(\S+)\n(_\d+:\n)\1:\n/$2/;                                         # remove jmp next
$floop ~~ s:g/^(?=[a-z]\w*(.*))/ {(sprintf("%4d ", $pc), $pc += $1 ? 5 : 1)[0]} /;        # add locations
my %labels = /^(_\d+):(?=(?:\n_\d+:)*\n *(\d+) )/gm;                                    # pc addr of labels
$floop ~~ s:g/^ *(\d+) j(?:z|mp) *\K(_\d+)$/ (@{[$labels{$2} - $1 - 1]}) $labels{$2}/;  # fix jumps
$floop ~~ s:g/^_\d+.*\n//;                                     # remove labels

}}
 
$result ~= "Datasize: {$namecount} Strings: {$stringcount}\n";
$result ~= $_ ~ "\n" for %strings.keys.sort;
$result ~= $_;

say $result; 


my $ref = q:to/EOD/;
Datasize: 1 Strings: 2
"count is: "
"\n"
   0 push  1
   5 store [0]
  10 fetch [0]
  15 push  10
  20 lt
  21 jz     (43) 65
  26 push  0
  31 prts
  32 fetch [0]
  37 prti
  38 push  1
  43 prts
  44 fetch [0]
  49 push  1
  54 add
  55 store [0]
  60 jmp    (-51) 10
  65 halt
EOD

use Test;
#is ($result, $ref);


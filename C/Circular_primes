#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Circular_primes
#c# 2020-04-06 <RC
#m# MOAR: OK
#j# JVM:  BROKEN

my @res;

use ntheory:from<Perl5> qw[is_prime];

# Most of the repunit testing is relatively speedy using the ntheory library. The really slow ones are R(25031), at ~42 seconds and R(49081) at 922(!!) seconds.

sub isCircular(\n) {
   return False unless n.is-prime;
   my @circular = n.comb;
   return False if @circular.min < @circular[0];
   for (1..^@circular.elems) {
      return False if n > my $rotated = @circular.rotate($_).join;
      return False unless $rotated.is-prime;
   }
   True
}

@res.push: "The first 19 circular primes are:";
@res.push: ((1..âˆž).hyper.grep: { isCircular($_) })[^19];

@res.push: "\nThe next 4 circular primes, in repunit format, are:";
loop ( my $i = 7, my $count = 0; $count < 4; $i++ ) {
   my $target = 1 x $i;
   if $target.is-prime  {
      @res.push: "R(" ~ $i ~ ")";
      $count++
   }
}

@res.push: "\nRepunit testing:";

#(5003, 9887, 15073, 25031, 35317, 49081).map: {
(5003, 9887).map: {
    my $now = now;
    @res.push: "R($_): Prime? "~ ? is_prime("{1 x $_}")
}
.say for @res;

my $ref = q:to/END/;
The first 19 circular primes are:
2 3 5 7 11 13 17 37 79 113 197 199 337 1193 3779 11939 19937 193939 199933

The next 4 circular primes, in repunit format, are:
R(19)
R(23)
R(317)
R(1031)

Repunit testing:
R(5003): Prime? False
R(9887): Prime? False
END
#R(15073): Prime? False
#R(25031): Prime? False
#R(35317): Prime? False
#R(49081): Prime? True

use Test;
is @res.join("\n"), chomp $ref;

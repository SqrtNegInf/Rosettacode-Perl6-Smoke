#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Law_of_cosines_-_triples
#t# skiptest
#c# 2018-09-23
#m# MOAR: OK
#j#  JVM: OK 
#n# see -1 variant (that one uploaded to RC)
#n# extra credit 10_000 is just toodamnslow

my @res;

sub triples ($n, @angles) {
    my $sq-as-set = set my @squares = 1..$n X**2; # (1..$n) >>**>> 2
    my %triples; my %c2;
    for flat @squares X @squares -> $a2, $b2 {
        (my $a, my $b) = ($a2,$b2)».sqrt».floor; 
        my $ab = $a * $b;
        %c2{@angles} = $a2 + $b2 X+ -$ab, 0, $ab; 
        %triples{$_}{~sort $a, $b, %c2{$_}.sqrt}++ if %c2{$_} ∈ $sq-as-set for @angles;
    }
    %triples;
}

use Sort::Naturally;
 
#my $n = 13;
#say "Integer triangular triples for sides 1..$n:";
#my %itt = triples($n, (60, 90, 120));
#for %itt.keys.sort: {+%itt{$^a}} -> $angle {
#    @res.push: sprintf "Angle %3d° has %2d solutions: %s", $angle, +%itt{$angle}, %itt{$angle}.keys.sort(*.&naturally).join(', ');
#}
#.say for @res;

# Non-equilateral
# extra credit N=10_000/60°: 17806
# 10_000 too slow, just proof-of-concept for N=100/60°: 70 
say my $result = 'Non-equilateral n=100/60°: ' ~ [+] ([!=] .split(' ') for triples(10000,[60]){60}.keys);

my $ref = qq:to/END/;
Non-equilateral n=100/60°: 17806
END

use Test; 
is $result, chomp $ref;

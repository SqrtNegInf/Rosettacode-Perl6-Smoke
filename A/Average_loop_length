#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Average_loop_length
#c# 2016-05-09 <>RC, 2018-05-31 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# with hash key order now variable, testing upgraded with ArrayHash
#n# 'random' output changed on 2017-08-10
#n# 2020-09-01 something is unstable, run #2 flips between: 2.00 vs. 2.67;

use lib 'lib';
use ArrayHash;

srand 123456;

constant MAX_N  = 20;
constant TRIALS = 100;

my @res;
for 1 .. MAX_N -> $N {
    #dd my @glorp = find-loop(random-mapping($N)).elems xx TRIALS;
    #my $empiric = TRIALS R/ [+] @glorp;
    my $empiric = TRIALS R/ [+] find-loop(random-mapping($N)).elems xx TRIALS;
    my $theoric = [+] map -> $k { $N ** ($k + 1) R/ [×] flat $k**2, $N - $k + 1 .. $N }, 1 .. $N;

    FIRST say " N    empiric      theoric      (error)";
    FIRST say "===  =========  ============  =========";
    #FIRST srand 123456; # trick doesn't work here

    @res.push: sprintf "%3d  %9.4f  %12.4f    (%4.2f%%)",
            $N,  $empiric,
                        $theoric, 100 × abs($theoric - $empiric) / $theoric;
}
.say for @res;  #exit;

sub random-mapping ($n) {
    my %temp = random-mapping-orig($n);
    my %pair := array-hash();
    %pair{$_} = %temp{$_} for sort %temp.keys;
    return %pair;
}

sub random-mapping-orig { hash .list Z=> .roll(^$^size) given (^$^size) }

sub find-loop { 0, | %^mapping{*} ...^ { (%){$_}++ } }

my $moar = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.5400        1.5000    (2.67%)
  3     1.8700        1.8889    (1.00%)
  4     2.2800        2.2188    (2.76%)
  5     2.5600        2.5104    (1.98%)
  6     2.7800        2.7747    (0.19%)
  7     2.7900        3.0181    (7.56%)
  8     3.2000        3.2450    (1.39%)
  9     3.3500        3.4583    (3.13%)
 10     3.6400        3.6602    (0.55%)
 11     3.6000        3.8524    (6.55%)
 12     4.0100        4.0361    (0.65%)
 13     4.0300        4.2123    (4.33%)
 14     4.5200        4.3820    (3.15%)
 15     4.6500        4.5458    (2.29%)
 16     4.7200        4.7043    (0.33%)
 17     4.7700        4.8579    (1.81%)
 18     4.8000        5.0071    (4.14%)
 19     5.2500        5.1522    (1.90%)
 20     5.4000        5.2936    (2.01%)
END

my $xoar = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.4700        1.5000    (2.00%)
  3     1.8900        1.8889    (0.06%)
  4     2.2100        2.2188    (0.39%)
  5     2.5700        2.5104    (2.37%)
  6     2.5800        2.7747    (7.02%)
  7     3.1900        3.0181    (5.69%)
  8     3.3600        3.2450    (3.54%)
  9     3.4300        3.4583    (0.82%)
 10     3.7700        3.6602    (3.00%)
 11     4.1300        3.8524    (7.21%)
 12     4.5100        4.0361    (11.74%)
 13     3.8500        4.2123    (8.60%)
 14     4.5600        4.3820    (4.06%)
 15     4.2900        4.5458    (5.63%)
 16     4.3900        4.7043    (6.68%)
 17     4.8400        4.8579    (0.37%)
 18     4.9400        5.0071    (1.34%)
 19     5.1500        5.1522    (0.04%)
 20     4.8100        5.2936    (9.14%)
END

my $jvm = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.3400        1.5000    (10.67%)
  3     1.9200        1.8889    (1.65%)
  4     2.2000        2.2188    (0.85%)
  5     2.5700        2.5104    (2.37%)
  6     2.7000        2.7747    (2.69%)
  7     2.9200        3.0181    (3.25%)
  8     3.1400        3.2450    (3.24%)
  9     3.1700        3.4583    (8.34%)
 10     3.6000        3.6602    (1.65%)
 11     3.8600        3.8524    (0.20%)
 12     3.7100        4.0361    (8.08%)
 13     4.1600        4.2123    (1.24%)
 14     4.1600        4.3820    (5.07%)
 15     4.3600        4.5458    (4.09%)
 16     4.6900        4.7043    (0.30%)
 17     4.8600        4.8579    (0.04%)
 18     4.7500        5.0071    (5.13%)
 19     4.8200        5.1522    (6.45%)
 20     4.7900        5.2936    (9.51%)
END

use Test;
my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is @res.join("\n"), chomp $ref;

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Average_loop_length
#c# 2016-05-09 <>RC, 2018-05-31 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# with hash key order now variable, testing upgraded with ArrayHash
#n# 'random' output changed on 2017-08-10

use lib 'lib';
use ArrayHash;

srand 123456;

constant MAX_N  = 20;
constant TRIALS = 100;

my @res;
for 1 .. MAX_N -> $N {
    my $empiric = TRIALS R/ [+] find-loop(random-mapping($N)).elems xx TRIALS;
    my $theoric = [+] map -> $k { $N ** ($k + 1) R/ [×] flat $k**2, $N - $k + 1 .. $N }, 1 .. $N;

    FIRST say " N    empiric      theoric      (error)";
    FIRST say "===  =========  ============  =========";

    @res.push: sprintf "%3d  %9.4f  %12.4f    (%4.2f%%)",
            $N,  $empiric,
                        $theoric, 100 × abs($theoric - $empiric) / $theoric;
}
.say for @res; 

sub random-mapping ($n) { 
    my %temp = random-mapping-orig($n);
    my %pair := array-hash();
    %pair{$_} = %temp{$_} for sort %temp.keys;
    return %pair;
}

sub random-mapping-orig { hash .list Z=> .roll(^$^size) given (^$^size) }

sub find-loop { 0, | %^mapping{*} ...^ { (%){$_}++ } }

my $moar = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.5400        1.5000    (2.67%)
  3     2.0800        1.8889    (10.12%)
  4     2.4700        2.2188    (11.32%)
  5     2.4900        2.5104    (0.81%)
  6     2.8100        2.7747    (1.27%)
  7     3.1100        3.0181    (3.04%)
  8     3.2500        3.2450    (0.15%)
  9     3.8100        3.4583    (10.17%)
 10     3.6900        3.6602    (0.81%)
 11     3.8400        3.8524    (0.32%)
 12     3.7200        4.0361    (7.83%)
 13     4.2900        4.2123    (1.84%)
 14     4.1800        4.3820    (4.61%)
 15     4.5700        4.5458    (0.53%)
 16     4.6500        4.7043    (1.15%)
 17     4.9800        4.8579    (2.51%)
 18     4.8400        5.0071    (3.34%)
 19     5.3100        5.1522    (3.06%)
 20     5.6600        5.2936    (6.92%)
END

my $jvm = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.3400        1.5000    (10.67%)
  3     1.9200        1.8889    (1.65%)
  4     2.2000        2.2188    (0.85%)
  5     2.5700        2.5104    (2.37%)
  6     2.7000        2.7747    (2.69%)
  7     2.9200        3.0181    (3.25%)
  8     3.1400        3.2450    (3.24%)
  9     3.1700        3.4583    (8.34%)
 10     3.6000        3.6602    (1.65%)
 11     3.8600        3.8524    (0.20%)
 12     3.7100        4.0361    (8.08%)
 13     4.1600        4.2123    (1.24%)
 14     4.1600        4.3820    (5.07%)
 15     4.3600        4.5458    (4.09%)
 16     4.6900        4.7043    (0.30%)
 17     4.8600        4.8579    (0.04%)
 18     4.7500        5.0071    (5.13%)
 19     4.8200        5.1522    (6.45%)
 20     4.7900        5.2936    (9.51%)
END

use Test;
my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is @res.join("\n"), chomp $ref;

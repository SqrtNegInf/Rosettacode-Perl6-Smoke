#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Align_columns
#c# 2016-01-06 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# older version with updated syntax
 
###to be called with perl6 columnaligner.pl <orientation>(left, center , right )
###with left as default
my $fh = open  "align_columns.txt" , :r  or die "Can't read text file!\n" ;
my @filelines = $fh.lines ;
close $fh ;

my @maxcolwidths ; #array of the longest words per column
#########fill the array with values#####################
for @filelines -> $line {
   my @words = $line.split( "\$" ) ;
   for 0..@words.elems - 1 -> $i {
      if @maxcolwidths[ $i ] {
	 if @words[ $i ].chars > @maxcolwidths[$i] {
	    @maxcolwidths[ $i ] = @words[ $i ].chars ;
	 }
      }
      else {
	 @maxcolwidths.push( @words[ $i ].chars ) ;
      }
   }
}

my $justification = @*ARGS[ 0 ] || "left" ;
# print lines , $gap holds the number of spaces, 1 to be added 
# to allow for space preceding or following longest word
my @res1;
for @filelines -> $line {
   my @words = $line.split( "\$" ) ;
   my $text = '';
   for 0 ..^ @words -> $i {
      my $gap =  @maxcolwidths[$i] - @words[$i].chars + 1 ;
      if $justification eq "left" {
	 $text ~= @words[ $i ] ~ " " x $gap;
      } elsif $justification eq "right" {
	 $text ~= " " x $gap ~ @words[$i] ;
      } elsif $justification eq "center" {
	 $gap = ( @maxcolwidths[ $i ] + 2 - @words[$i].chars ) div 2 ;
	 $text ~= " " x $gap ~ @words[$i] ~ " " x $gap ;
      }
   }
    @res1.push: $text;
   #say ''; #for the newline
}
.say for @res1;

# Or another way. To be called exactly as the first script.
my @lines = slurp("align_columns.txt").lines;
my @widths;

my @res2;
for @lines { for .split('$').kv { @widths[$^key] max= $^word.chars; } }
for @lines { @res2.push: ~.split('$').kv.map: { (align @widths[$^key], $^word) ~ " "; } }
my @res3;
for @lines { @res3.push: ~.split('$').kv.map: { (align @widths[$^key], $^word, 'right') ~ " "; } }
.say for @res3;

sub align($column_width, $word, $aligment = @*ARGS[0]) {
        my $lr = $column_width - $word.chars;
        my $c  = $lr / 2;
        given ($aligment) {
                when "center" { " " x $c.ceiling ~ $word ~ " " x $c.floor }
                when "right"  { " " x $lr        ~ $word                  }
                default       {                    $word ~ " " x $lr      }
        }
}
.say for @res2;

my @res4;
#my @text := @filelines.map(*.split: '$').List;
my @text  := @filelines.map(*.split('$').cache).cache;
my $alignment = 'left';
my @w      = roundrobin(|@text).map(*Â».chars.max);
my $align  = {left=>'-', right=>''}{$alignment};

# DH - kludge for dynamic building of format string
#my $format = gather { for ^@w { take '%' ~ sprintf "%d\$%s%ss", 1+$_, $align, @w[$_]; } }
# my $format = @w.map({ "%{++$}\${$align}{$_}s" }).join(" "); # ~ "\n"; # DH - ++$ not working inside nested curlies?
my $format = @widths.map( '%' ~ ++$ ~ '$' ~ $align ~ * ~ 's' ).join(' ');

@res4.push: sprintf($format, |$_) for @text;
.say for @res4;

my $ref1 = qq:to/END/;
Given      a          text       file   of     many      lines,     where    fields  within  a      line  
are        delineated by         a      single 'dollar'  character, write    a       program 
that       aligns     each       column of     fields    by         ensuring that    words   in     each  
column     are        separated  by     at     least     one        space.   
Further,   allow      for        each   word   in        a          column   to      be      either left  
justified, right      justified, or     center justified within     its      column. 
END

my $ref2 = qq:to/END/;
Given       a           text        file    of      many       lines,      where     fields   within   a       line   
are         delineated  by          a       single  'dollar'   character,  write     a        program 
that        aligns      each        column  of      fields     by          ensuring  that     words    in      each   
column      are         separated   by      at      least      one         space.   
Further,    allow       for         each    word    in         a           column    to       be       either  left   
justified,  right       justified,  or      center  justified  within      its       column. 
END

my $ref3 = qq:to/END/;
     Given           a        text    file      of       many      lines,     where   fields   within       a  line   
       are  delineated          by       a  single   'dollar'  character,     write        a  program 
      that      aligns        each  column      of     fields          by  ensuring     that    words      in  each   
    column         are   separated      by      at      least         one    space. 
  Further,       allow         for    each    word         in           a    column       to       be  either  left   
justified,       right  justified,      or  center  justified      within       its  column. 
END

# differs from $ref1 in spaces at end of line (kludge adds another space)
my $ref4 = qq:to/END/;
Given      a          text       file   of     many      lines,     where    fields  within  a      line 
are        delineated by         a      single 'dollar'  character, write    a       program             
that       aligns     each       column of     fields    by         ensuring that    words   in     each 
column     are        separated  by     at     least     one        space.                               
Further,   allow      for        each   word   in        a          column   to      be      either left 
justified, right      justified, or     center justified within     its      column.                     
END

use Test;
is @res1.join("\n"), chomp $ref1;
is @res2.join("\n"), chomp $ref2;
is @res3.join("\n"), chomp $ref3;
is @res4.join("\n"), chomp $ref4;

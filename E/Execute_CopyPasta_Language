#!/usr//bin/env perl6
#u# http://rosettacode.org/wiki/Execute_CopyPasta_Language
#t# inprogress
#c# 2019-11-xx >RC
#m# MOAR: OK
#j# JVM:  OK

sub CopyPastaX ($code) {
    my @CB;
    my @code = $code.split("\n")>>.trim.grep: *.so;
    my @code-orig = @code;

    while (my $instruction = @code.shift) {
        given $instruction {
            when 'Copy'      { @CB.push: @code.shift }
            when 'CopyFile'  { @CB.push: @code[0] eq 'TheF*ckingCode' ?? @code-orig !! slurp @code[0]; @code.shift }
            when 'Duplicate' { @CB = (flat @CB) xx @code.shift }
            when 'Pasta!'    { return @CB }
            default          { return "Does not compute: $instruction" }
        }
    }
}

sub CopyPasta ($code) {
    my @CB;
    my @code = $code.split("\n")>>.trim.grep: *.so;

    my $ptr = 0;
    while (1) {
        given $ptr {
            when @code[$ptr] eq 'Copy'      { @CB.push: @code[++$ptr] }
            when @code[$ptr] eq 'CopyFile'  { $ptr++; @CB.push: @code[$ptr] eq 'TheF*ckingCode' ?? @code !! slurp @code[$ptr] }
            when @code[$ptr] eq 'Duplicate' { @CB = (flat @CB) xx @code[++$ptr] }
            when @code[$ptr] eq 'Pasta!'    { return @CB }
            default                         { return "Does not compute: @code[$ptr]" }
        }
        $ptr++;
    }
}

for (
    qq{Copy\nRosetta Code\n Duplicate \n2\n\nPasta!},
    qq{CopyFile\nref/pasta.txt\nDuplicate\n1\nPasta!},
    qq{Copy\nInvalid\n Duplicate\n1\n\nGoto\n3\nPasta!},
    qq{CopyFile\nTheF*ckingCode\nDuplicate\n2\nPasta!}
) {
    .say for CopyPastaX($_); 
    say '--';
    .say for CopyPasta($_); 
    say '==';
}

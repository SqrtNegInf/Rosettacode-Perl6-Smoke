#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/External_sort
#t# inprogress
#c# 2019-11-xx >RC
#p# OK
#n# ?? note dual use of 'mysort', via direct call, and passed as a sorting routine for native 'sort' function

my $result;


my $max = 4; # records per merge file
our(@chunk,@tempf);

# just a simple numeric sort here, but you could get fancy...
sub mysort ($a, $b) { return $a <=> $b }

my @data = qw<432 345 3.21 543 -987 45.6 678 123 765 567 876 654 .789 2/34>;

# read input and create sorted temporary files
while (@data) {
    push @chunk, $_;
    store(\@chunk), @chunk = () if @chunk == $max;
}

store(\@chunk) if @chunk;

#`[[

sub store {
    my($a) = @_;
    my $f = IO::File->new_tmpfile; # self-deleting after program exit
    print $f sort mysort @$a;
    seek $f, 0, 0 or warn "Oops: $!";
    push(@tempf, { fh => $f, queued => scalar <$f> } );
}

# merge everything
loop {
    my($lowest) = (sort { mysort($a->{queued}, $b->{queued}); } grep(defined $_->{queued}, @tempf) )[0];
    last unless $lowest->{queued};
    $result .= $lowest->{queued};
    $lowest->{queued} = $lowest->{fh}->getline();
}

print $result;

my $ref = <<'END';
-987
.789
3.21
45.6
123
234
345
432
543
567
654
678
765
876
END

#use Test;
#is $result, $ref;

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Sort_using_a_custom_comparator
#c# 2016-05-04 <RC, 2021-03-15 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# the old verbiage confused me, so maybe not useful for new Raku looky-loos?

my @strings = <Here are some sample strings to be sorted>;

# XX using of an arity 2 sort routine

#my @sorted_strings = sort { $^a.chars <=> $^b.chars or $^a.lc cmp $^b.lc }, @strings;
#my @sorted_strings = sort { .chars, .lc }, @strings; 
# or more concisely:
put my @sorted1 = @strings.sort:{.chars, .lc};

# XX If instead the function you feed to sort is of arity 1, it will do the 'Schwartzian transform' for you, 
# XX handling numeric and string fields appropriately

#say my @sorted2 = sort -> $x { [ $x.chars, $x.lc ] }, @strings; # square-brackets superfluous
put my @sorted2 = sort -> $x { $x.chars, $x.lc }, @strings;

my $ref = 'be to are Here some sample sorted strings';

use Test;
is @sorted1.join(' '), chomp $ref;;
is @sorted2.join(' '), chomp $ref;;

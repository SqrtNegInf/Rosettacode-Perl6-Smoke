#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Suffix_tree
#c# 2016-05-15 <RC, 2017-02-01 >RC, 2018-04-30 >RC
#m# MOAR: OK
#j#  JVM: OK

# Here is quite a naive algorithm, probably O ( n 2 )

multi suffix-tree(Str $str) { suffix-tree flat map &flip, [\~] $str.flip.comb } # DH 2f69be9 needs 'flat'
multi suffix-tree(@a) {
    hash
    @a == 0 ?? () !!
    @a == 1 ?? (@a[0] => []) !!
    gather for @a.classify(*.substr(0, 1)) {
        my $subtree = suffix-tree(grep *.chars, map *.substr(1), .value[]);
        if $subtree == 1 {
            my $pair = $subtree.pick;
            take .key ~ $pair.key => $pair.value;
        } else {
            take .key => $subtree;
        }
    }
}

# Displaying the tree is done with the code from visualize a tree:

my $tree = root => suffix-tree 'banana$';
.say for my @res.push = visualize-tree $tree, *.key, *.value.list; # DH  |*.value also works

my $ref = q:to/END/;
root
├─$
├─a
│ ├─$
│ └─na
│   ├─$
│   └─na$
├─banana$
└─na
  ├─$
  └─na$
END

#`{
    ┌─ [1] banana$                    
    │                       ┌─ [2] na$
    │             ┌─ na ────┴─ [4] $  
────┼─ a ─────────┴─ [6] $            
    │             ┌─ [3] na$          
    ├─ na ────────┴─ [5] $            
    └─ [7] $                          
}


use Test;
is @res.join("\n"), chomp $ref;

# DH 2f69be9: changes below not needed in 'Visualize_a_tree' as input data structure different?
sub visualize-tree($tree, &label, &children,
                   :$indent = '',
                   :@mid = ('├─', '│ '),
                   :@end = ('└─', '  '),
) {
    sub visit($node, *@pre) {
        gather {
            take @pre[0] ~ label($node);
            my @children = sort children($node); # DH - to account for hash-key instability
            my $end = @children.end;
            for @children.kv -> $_, $child {
                when $end { take visit($child, (@pre[1] X~ @end)) }
                default   { take visit($child, (@pre[1] X~ @mid)) }
            }
        }
    }
    flat visit($tree, $indent xx 2); 
}

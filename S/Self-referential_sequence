#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Self-referential_sequence
#c# 2016-06-12 <>RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2016 196.742u 2.298s 4:29.33 73.8%
#n# 2019  80.076u 0.845s 1:21.28 99.5% 

my @res;

my (%seen,@list);
my $longest = 0;

#for 1 .. 1000000 -> $m { 
for 1 .. 10000 -> $m {
    next unless $m ~~ /0/;         # seed must have a zero
    my $j = $m.comb.sort.join;
    next if %seen{$j}:exists;      # already tested a permutation   # DH
    %seen{$j} = '';
    my @seq = converging($m);
    my (%elems,$count);
    for @seq[] -> $value { last if ++%elems{$value} == 2; $count++; };
    if $longest == $count {
        @list.push($m);
        #say "\b" x 20, "A: $count, $m"; # monitor progress
    }
    elsif $longest < $count {
        $longest = $count;
        @list = $m;
        #say "\b" x 20, "B: $count, $m"; # monitor progress
    }   
};

#for @list -> $m {
my $m = @list[0];
    say "Seed Value(s): ", my $seeds = ~permutations($m).unique.grep( { .substr(0,1) != 0 } ); #DH
    my @seq = converging($m);
    my %elems;
    my $count;
    for @seq[] -> $value { last if ++%elems{$value} == 2; $count++; };
    say "\nIterations: ", $count;
    say "\nSequence: (Only one shown per permutation group.)";
    @res.push: $_ for @seq[^$count];
   .say for @res;
#}

sub converging ($seed) { return $seed, -> $l { join '', map { $_.value.elems~$_.key }, $l.comb.classify({$^b}).sort: {-$^c.key} } ... * }

sub permutations ($string, $sofar? = '' ) {
    return $sofar unless $string.chars;
    my @perms;
    for ^$string.chars -> $idx {
        my $this = $string.substr(0,$idx)~$string.substr($idx+1);
        my $char = substr($string, $idx,1);
        @perms.push( |permutations( $this, $sofar ~ $char ) ); #DH
    }
    return @perms;
}


my $ref = qq:to/END/;
9009
2920
192210
19222110
19323110
1923123110
1923224110
191413323110
191433125110
19151423125110
19251413226110
1916151413325110
1916251423127110
191716151413326110
191726151423128110
19181716151413327110
19182716151423129110
29181716151413328110
19281716151423228110
19281716151413427110
19182716152413228110
END

use Test;
is $count, 21;
is $seeds, '9009 9090 9900';
is @res.join("\n"), chomp $ref;

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Simulated_annealing
#c# 2020-01-23 <RC, 2020-01-27 >RC
#m# MOAR: OK
#j# JVM:  OK
#n# 2020-10-07 different answers when run from interactive shell vs cron-launch?
#n#
#n# Notes on revisions (see .1 for original version as uploaded by Hkdtam++)
#n#
#n# more flexible on input grid (but must be perfect square), 'magic' numbers keyed to 10x10 grid go away
#n# make distance array available globally (no lookup function)
#n# more idiomatic syntax (e.g. no C-style loops)
#n# remove intermediate variables when feasible
#n# rename some variables to better reflect their roles
#n# reformat code to emphasize parallelism
#n# .rotor suffices to make grid output (no separate print routine)
#n# output follows task spec (less is more)
#n# limit displayed values to non-redonkulous precision (this is not the LIGO experiment)
#n# extended sigil-less style (temp. variable kludges clobbered with 'anonymous containers', thundergnat++)
#n# single/double quote style: former for static strings, latter for ones needing interpolation
#n# eliminated 'sa' as routine (to eliminate need for globals could have packed *everything* into it, but 6-of-one, 1/2-dozen...)

#srand 123456;
srand 1234; # more dramatic stats

my @res;

# simulation setup
my \cities = 100;  # number of cities
my \kmax   = 1e6;  # iterations to run
my \kT     = 1;    # initial 'temperature'

die 'City count must be a perfect square.' if cities.sqrt != cities.sqrt.Int;

# locations of (up to) 8 neighbors, with grid size derived from number of cities
my \gs = cities.sqrt;
my \neighbors = [1, -1, gs, -gs, gs-1, gs+1, -(gs+1), -(gs-1)];

# matrix of distances between cities
my \D = [;];
for 0 ..^ cities² -> \j {
    my (\ab, \cd)       = (j/cities, j%cities)».Int;
    my (\a, \b, \c, \d) = (ab/gs, ab%gs, cd/gs, cd%gs)».Int;
    D[ab;cd] = sqrt (a - c)² + (b - d)²
}

sub T(\k, \kmax, \kT)      { (1 - k/kmax) × kT }                                 # temperature function, decreases to 0
sub P(\ΔE, \k, \kmax, \kT) { exp -ΔE / T(k, kmax, kT) }                          # probability to move from s to s_next
sub Es(\path)              { sum (D[ path[$_]; path[$_+1] ] for 0 ..^ +path-1) } # energy at s, to be minimized

# variation of E, from state s to state s_next
sub delta-E(\s, \u, \v) {
    my (\a,   \b,  \c,  \d) = D[s[u-1];s[u]], D[s[u+1];s[u]], D[s[v-1];s[v]], D[s[v+1];s[v]];
    my (\na, \nb, \nc, \nd) = D[s[u-1];s[v]], D[s[u+1];s[v]], D[s[v-1];s[u]], D[s[v+1];s[u]];
    if    v == u+1 { return (na + nd) - (a + d) }
    elsif u == v+1 { return (nc + nb) - (c + b) }
    else           { return (na + nb + nc + nd) - (a + b + c + d) }
}

# E(s0), initial state
my \s = @ = flat 0, (1 ..^ cities).pick(*), 0;  # use anonymous array container to create sigil-less variable
my \E-min-global = my \E-min = $ = Es(s);       # likewise, with scalar

# redundant -- 1st row of progress table shows the same information
#@res.push: 'kT = ' ~ \kT;  
#@res.push: 'E(s0): ' ~ E-min.fmt('%.1f');

for 0 ..^ kmax -> \k {
    @res.push: sprintf 'k:%8u  T:%4.1f  Es: %3.1f' , k, T(k, kmax, kT), Es(s)
        if k % (kmax/10) == 0;

    # valid candidate cities (exist, adjacent)
    my \cv = neighbors[(^8).roll] + s[ my \u = 1 + (^(cities-1)).roll ];
    next if cv ≤ 0 or cv ≥ cities or D[s[u];cv] > sqrt(2);

    my \v  = s[cv];
    my \ΔE = delta-E(s, u, v);
    if ΔE < 0 or P(ΔE, k, kmax, kT) ≥ rand { # always move if negative
        (s[u], s[v]) = (s[v], s[u]);
        E-min += ΔE;
        E-min-global = E-min if E-min < E-min-global;
    }
}

@res.push: "\nE(s_final): " ~ E-min-global.fmt('%.1f');
@res.push: "Path:\n" ~ s».fmt('%2d').rotor(20,:partial).join: "\n";

say my $result = join "\n" , @res;

my $moar = q:to/END/;
k:       0  T: 1.0  Es: 514.2
k:  100000  T: 0.9  Es: 176.1
k:  200000  T: 0.8  Es: 195.8
k:  300000  T: 0.7  Es: 153.9
k:  400000  T: 0.6  Es: 158.4
k:  500000  T: 0.5  Es: 150.8
k:  600000  T: 0.4  Es: 130.0
k:  700000  T: 0.3  Es: 124.5
k:  800000  T: 0.2  Es: 117.9
k:  900000  T: 0.1  Es: 115.8

E(s_final): 115.8
Path:
 0 10 11 20 30 31 21 22 12  1  2  3 17 27 18 19  9  8  7  6
 5  4 14 13 23 15 16 26 35 45 44 33 43 34 24 25 36 37 46 56
57 47 48 38 28 29 39 49 59 58 69 78 77 88 87 86 76 66 67 68
79 89 99 98 97 96 95 94 93 92 91 90 80 81 82 83 73 63 62 72
71 70 50 40 41 60 61 51 52 53 64 74 84 85 75 65 55 54 42 32
 0
END

my $xoar = q:to/END/;
k:       0  T: 1.0  Es: 547.7
k:  100000  T: 0.9  Es: 225.8
k:  200000  T: 0.8  Es: 170.9
k:  300000  T: 0.7  Es: 156.7
k:  400000  T: 0.6  Es: 152.4
k:  500000  T: 0.5  Es: 144.3
k:  600000  T: 0.4  Es: 130.7
k:  700000  T: 0.3  Es: 126.2
k:  800000  T: 0.2  Es: 119.2
k:  900000  T: 0.1  Es: 120.0

E(s_final): 119.7
Path:
 0 31 41 51 52 61 62 72 82 83 75 57 68 58 59 69 79 78 88 89
99 98 97 87 86 85 76 65 64 54 55 56 66 67 77 96 95 84 74 53
63 73 94 93 92 91 90 81 71 80 60 70 50 40 30 20 21 22 23 13
 1  2  3  4 14 16 15  5  6  7  8  9 18 17 27 26 25 24 34 44
45 46 47 38 48 49 39 29 19 28 37 36 35 33 43 42 32 12 11 10
 0
END

my $jvm = q:to/END/;
k:       0  T: 1.0  Es: 521.4
k:  100000  T: 0.9  Es: 194.9
k:  200000  T: 0.8  Es: 182.8
k:  300000  T: 0.7  Es: 161.2
k:  400000  T: 0.6  Es: 151.7
k:  500000  T: 0.5  Es: 136.3
k:  600000  T: 0.4  Es: 132.8
k:  700000  T: 0.3  Es: 112.7
k:  800000  T: 0.2  Es: 113.5
k:  900000  T: 0.1  Es: 110.3

E(s_final): 110.3
Path:
 0  1 11 21 20 31 41 32 22 12  2  3 14 24 34 44 43 53 54 55
64 63 62 52 61 51 42 33 23 13  4  5 16 17 27 36 37 47 57 48
49 39 38 28 29 19  9 18  8  7  6 15 25 26 35 45 46 56 65 74
84 95 96 97 87 86 76 77 78 88 98 99 89 79 69 59 58 68 67 66
75 85 94 93 92 91 90 70 80 81 82 83 73 72 71 60 50 40 30 10
 0
END

use Test;
my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is @res.join("\n"), chomp $ref;

#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Sieve_of_Eratosthenes
#c# 2015-11-03 <>RC
#m# MOAR: OK
#j#  JVM: OK

sub sieve( Int $limit ) {
    my @is-prime = flat False, False, True xx $limit - 1;

    gather for @is-prime.kv -> $number, $is-prime {
        if $is-prime {
            take $number;
            @is-prime[$_] = False if $_ %% $number for $number**2 .. $limit; 
        }
    }
}

say sieve 100;
#(sieve 100).join(",").say;

# A recursive version:
multi erat(Int $N) { erat 2 .. $N }
multi erat(@a where @a[0] > sqrt @a[*-1]) { @a }
multi erat(@a) { @a[0], erat(@a.grep: * % @a[0]) }

say flat erat 100;

exit;

#Of course, upper limits are for wusses. Here's a version using infinite streams, that just keeps going until you ^C it (works under Niecza):
role Filter[Int $factor] {
    method next { repeat until $.value % $factor { callsame } }
}

class Stream {
    has Int $.value is rw = 1;

    method next { ++$.value }
    method filter { self but Filter[$.value] }
}

.next, say .value for Stream.new, *.filter ... *;

use Test;
my $ref = <2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97>;
is (sieve 100), $ref, 'basic';
is (flat erat 100), $ref, 'recursive';

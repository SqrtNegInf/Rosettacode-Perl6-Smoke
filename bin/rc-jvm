#!/usr/local/bin/perl
## benchmark Rosettacode programs, output and timings go in 'bench'
#c# 2016-08-05 2016-08-24 2016-08-29 2017-01-14 2017-11-04 2018-04-07 2018-04-28 2018-05-04 2018-05-16

#  Special designations
#  graphical - image output, usually tested against reference image
#  trivial - some have no tests, which is OK
#
#  Programs not tested:
#  toodamnslow - extract timings embedded in programs with:
#  nocode - have no runnable code
#  skiptest - hard to test
#  interactive - requires user input
#  forever - hangs, never terminates
#  broken - hangs, never terminates

#use warnings;

use Parallel::ForkManager;

# some program to test run solo
%Solo = (
'Pythagorean_triples' => 1,
'Law_of_cosines_-_triples-1' => 1,
'Rate_counter' => 1,
);

$mode = $0 =~ /moar/i ? 'moar' : 'jvm';

system "rakudobrew switch $mode-master";

chdir "$ENV{HOME}/perl6/Rosetta-Code" || die;

$dir = `date '+%Y-%m-%d'`; chomp $dir;
$dir .= $mode eq 'jvm' ? '-j' : '-m';
mkdir "bench/$dir"   if ! -e "bench/$dir";
unlink "bench/$mode" if   -e "bench/$mode";
system qq{cd bench; symlink $dir $mode};

$exe  = 'perl6';
$exe .= $mode eq 'jvm' ? '-j -I lib ' : '-m';

system "date";

my $skip = 'interactive|toodamnslow|skiptest|nocode|forever|broken';

# find Perl6 programs
for my $prog (@ARGV) {
    next if $prog =~ /\.(pl|[0-9])$/;
    next if $prog =~ /^Temp-/;
    @status = `head -12 $prog`;
    next unless $status[0] =~ /env perl6/;
    next if grep { /^#t#.*($skip)/ } @status;
    next if $mode eq 'moar' && grep { /^#m#.*BROKEN/i } @status;
    #next if $mode eq 'jvm'  && grep { /^#j#.*BROKEN/i } @status;

    $clargs = `grep 'RC.cli' $prog`; chomp $clargs; 
    $clargs =~ s/^.*RC.cli:\s+//; 
#    $clargs =~ s/'/\\"/g;  # ??
    $clargs =~ s/"/\\"/g; 

    $precmd = `grep 'RC.prep:' $prog`; chomp $precmd; 
    $precmd =~ s/^.*RC.prep:\s+//; 
    $precmd =~ s/\s+$//;

    $difftest = `grep 'RC.file' $prog`; chomp $difftest; 
    $difftest =~ s/^.*RC.file:\s+//; 
    $difftest =~ s/\s+$//;
    $difftest =~ s/\.BEND/.moar/ if $mode ne 'jvm';
    $difftest =~ s/\.BEND/.jvm/  if $mode eq 'jvm';

    if (defined %Solo{$prog}) { push @P_one_at_a_time, $prog } else { push @Programs, $prog }
    $Ppre{$prog} =  $precmd if $precmd ne '';
    $Prun{$prog} =  $clargs if $clargs ne '';
    $Pfile{$prog} = $difftest if $difftest ne '';
}

for my $prog (@P_one_at_a_time) {

    my $run = $prog;
    $run .= " $Prun{$prog}" if defined $Prun{$prog};

    system "$Ppre{$prog}" if defined $Ppre{$prog};
    system "rc-runone '$exe $run' > bench/$dir/$prog.out 2> bench/$dir/$prog.err";
    system "diff -s -wb -q ref/$Pfile{$prog} run/$Pfile{$prog} >> bench/$dir/$prog.out" if defined $Pfile{$prog};
}

# run remainder in parallel 
my $pm = Parallel::ForkManager->new(8);
RUN:
for my $prog (@Programs) {
    $pm->start and next RUN;

    my $run = $prog;
    $run .= " $Prun{$prog}" if defined $Prun{$prog};

    system "$Ppre{$prog}" if defined $Ppre{$prog};
    system "rc-runone '$exe $run' > bench/$dir/$prog.out 2> bench/$dir/$prog.err";
    system "diff -s -wb -q ref/$Pfile{$prog} run/$Pfile{$prog} >> bench/$dir/$prog.out" if defined $Pfile{$prog};

    $pm->finish;
}
$pm->wait_all_children;

# clean up
system('bin/rc-ts');
system "date";

#!/usr/local/bin/perl
## benchmark Rosettacode programs, output and timings go in 'bench'
#c# 2016-08-05 2016-08-24 2016-08-29 2017-01-14 2017-11-04 2018-04-07 2018-04-28 2018-05-04 2018-05-16

#  Special designations
#  graphical - image output, usually tested against reference image
#  trivial - some have no tests, which is OK
#
#  Programs not tested:
#  toodamnslow - extract timings embedded in programs with:
#  nocode - have no runnable code
#  skiptest - hard to test
#  interactive - requires user input
#  gui - requires windowing system (X11,Tk,GTK,SDL)
#  forever - hangs, never terminates
#  broken - hangs, never terminates

#use warnings;

use Parallel::ForkManager;

# for JVM, test with .1 version
%Dotversion = (
'24_game_Solve-1' => 1,
'24_game_Solve-2' => 1, # broken?
'Death_Star' => 1,
'Draw_a_sphere-1' => 1,
'Emirp_primes' => 1,
'Euler%27s_sum_of_powers_conjecture' => 1,
'Farey_sequence' => 1,
'Hailstone_sequence' => 1,
'Heronian_triangles' => 1,
'Largest_number_divisible_by_its_digits' => 1,
'Law_of_cosines_-_triples-1' => 1,
'Monty_Hall_problem' => 1,
'Numerical_Integration-2' => 1,
'Partition_an_integer_X_into_N_primes' => 1,
'Pentagram' => 1,
'Perfect_numbers-1' => 1,
'Perfect_totient_numbers' => 1,
'Prime_decomposition' => 1,
'Pythagorean_triples' => 1,
'Thiele%27s_interpolation_formula' => 1,
'Topswops' => 1,
'Totient_function' => 1,
'Vampire_number' => 1,
);

%Solo = (
'24_game_Solve-1 => 1',
'24_game_Solve-2 => 1',
'Archimedean_spiral => 1',
'Arithmetic_Rational => 1',
'Chaos_game => 1',
'Color_wheel => 1',
'Concurrent_computing => 1',
'Death_Star => 1',
'Draw_a_sphere-1 => 1',
'Euler%27s_sum_of_powers_conjecture => 1',
'Executable_library => 1',
'Farey_sequence => 1',
'Hailstone_sequence => 1',
'Heronian_triangles => 1',
'Julia_set => 1',
'Kaprekar_numbers-2 => 1',
'Kronecker_product_based_fractals => 1',
'Largest_number_divisible_by_its_digits => 1',
'Law_of_cosines_-_triples-1 => 1',
'Long_primes => 1',
'Monty_Hall_problem => 1',
'Parallel_calculations => 1',
'Parallel_calculations-2 => 1',
'Partition_an_integer_X_into_N_primes => 1',
'Perfect_numbers-1 => 1',
'Perfect_totient_numbers => 1',
'Permutation_test => 1',
'Plasma_effect => 1',
'Prime_decomposition => 1',
'Primes_-_allocate_descendants_to_their_ancestors-1 => 1',
'Pythagorean_triples => 1',
'Square-free_integers => 1',
'Topswops => 1',
'Totient_function => 1',
'Vampire_number => 1',
'Voronoi_diagram => 1',
);

# some program to test run solo (slow and/or use .race)
#%Solo = (
#'24_game_Solve-2' => 1,
#'Rate_counter' => 1,
#'Arithmetic_Rational' => 1,
#'Color_wheel' => 1,
#'Kaprekar_numbers-2' => 1,
#'Long_primes' => 1,
#'Parallel_calculations' => 1,
#'Parallel_calculations-2' => 1,
#'Permutation_test' => 1,
#'Square-free_integers' => 1,
#);


# broken
# 'Julia_set' => 1,
# 'Kronecker_product_based_fractals' => 1,
# 'Voronoi_diagram' => 1,
# 'Hough_transform' => 1,

$mode = $0 =~ /moar/i ? 'moar' : 'jvm';

system "rakudobrew switch $mode-master";

chdir "$ENV{HOME}/perl6/Rosetta-Code" || die;

$dir = `date '+%Y-%m-%d'`; chomp $dir;
$dir .= $mode eq 'jvm' ? '-j' : '-m';
mkdir "bench/$dir"   if ! -e "bench/$dir";
unlink "bench/$mode" if   -e "bench/$mode";
system qq{cd bench; symlink $dir $mode};

$exe  = 'perl6';
$exe .= $mode eq 'jvm' ? '-j -I lib ' : '-m';

system "date";

my $skip = 'interactive|gui|toodamnslow|skiptest|nocode|forever|broken';

# find Perl6 programs
$DB::single = 1;
for my $prog (@ARGV) {
    next if $prog =~ /\.(pl|[0-9])$/;
    next if $prog =~ /^Temp-/;
    @status = `head -12 $prog`;
    next unless $status[0] =~ /env perl6/;
    next if grep { /^#t#.*($skip)/ } @status;
    next if $mode eq 'moar' && grep { /^#m#.*BROKEN/i } @status;
    #next if $mode eq 'jvm'  && grep { /^#j#.*BROKEN/i } @status;

    $clargs = `grep 'RC.cli' $prog`; chomp $clargs; 
    $clargs =~ s/^.*RC.cli:\s+//; 
    $clargs =~ s/"/\\"/g; 
    $Prun{$prog} =  $clargs if $clargs ne '';

    $precmd = `grep 'RC.prep:' $prog`; chomp $precmd; 
    $precmd =~ s/^.*RC.prep:\s+//; 
    $precmd =~ s/\s+$//;
    $Ppre{$prog} =  $precmd if $precmd ne '';

    $pipe   = `grep 'RC.pipe:' $prog`; chomp $pipe; 
    $pipe   =~ s/^.*RC.pipe:\s+//; 
    $pipe   =~ s/\s+$//;
    $Pipe{$prog} =  $pipe   if $pipe   ne '';

    $difftest = `grep 'RC.file' $prog`; chomp $difftest; 
    $difftest =~ s/^.*RC.file:\s+//; 
    $difftest =~ s/\s+$//;
    $difftest =~ s/\.BEND/.moar/ if $mode ne 'jvm';
    $difftest =~ s/\.BEND/.jvm/  if $mode eq 'jvm';
    $Pfile{$prog} = $difftest if $difftest ne '';

    if ($mode eq 'jvm' and defined %Dotversion{$prog}) { push @Programs, "$prog.1" }
    elsif (defined %Solo{$prog})                       { push @P_one_at_a_time, $prog } 
    else                                               { push @Programs, $prog }

}

# run some programs solo (those with .race/.hyper, or have real-time aspect)
$DB::single = 1;
for my $prog (@P_one_at_a_time) {

    my $run = $prog;
    (my $pbase = $prog) =~ s/^..//;
    $run .= " $Prun{$prog}" if defined $Prun{$prog};

    system "$Ppre{$prog}" if defined $Ppre{$prog};
    system "rc-runone '$exe $run' > bench/$dir/$pbase.out 2> bench/$dir/$pbase.err";
    system "diff -s -wb -q ref/$Pfile{$prog} run/$Pfile{$prog} >> bench/$dir/$pbase.out" if defined $Pfile{$prog};
}

# run remainder in parallel 
my $pm = Parallel::ForkManager->new(8);
RUN:
for my $prog (@Programs) {
    $pm->start and next RUN;

    my $run = $prog;
    (my $pbase = $prog) =~ s/^..//;
    $run .= " $Prun{$prog}" if defined $Prun{$prog};

    system "$Ppre{$prog}" if defined $Ppre{$prog};

    $task = "bench/$dir/$pbase";
    if ($Pipe{$prog}) {
        $exe = qq[perl -e "print qq[$Pipe{$prog}]" | ] . $exe;
        ($u0,$s0) = cpu_time(); $r0 = (time());
        system qq{$exe $run 1> $task.out 2> $task.tmp};
        ($u1,$s1) = cpu_time(); $r1 = (time());
        if (! -z "$task.tmp") { system qq{echo '::STDERR::' >> $task.out; cat $task.tmp >> $task.out} }
        unlink "$task.tmp";
        open E, ">$task.err"; 
        printf E "real\t%.3f\nuser\t%.3f\nsys\t%.3f\n", 0, 0.4+$r1-$r0, $u1-$u0, $s1-$s0;
        close E;
    } else {
        system qq{rc-runone '$exe $run' > $task.out 2> $task.err};
    }
    system "diff -s -wb -q ref/$Pfile{$prog} run/$Pfile{$prog} >> $task.out" if defined $Pfile{$prog};

    $pm->finish;
}
$pm->wait_all_children;

# clean up
system('bin/rc-ts');
system "date";

sub cpu_time {
  my ($user,$system,$cuser,$csystem) = times;
  ($user+$cuser, $system+$csystem);
}

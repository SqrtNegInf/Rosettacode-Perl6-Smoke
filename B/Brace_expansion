#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Brace_expansion
#c# 2018-03-22 <RC
#m# MOAR: BROKEN
#j# JVM:  BROKEN
#n# not handling any nested alternations
#n# presumably this code once worked, so the fix should be small/easy??
#n# hmmm, walked back through program history on RC and perl6 versions back to 2015.12, no luck
#n# so far, just made the needed GLR fix of 'flat' in 'crosswalk' (which doesn't address the fundamental problem)

grammar BraceExpansion {
    token TOP  { (   <meta> | . )*          }
    token meta { '{' <alts> '}' | \\ .      }
    token alts {     <alt>+ % ','           }
    token alt  { (   <meta> | <-[ , } ]> )* }
}

sub crosswalk($/) {
say 'cw ' ~ $0;
    [X~] flat '', $0.map: -> $/ { ([ $<meta><alts><alt>.&alternatives ]) or $/ }
}

sub alternatives($_) {
say "alt: {$_}" if $_;
    when :not { () }
    when 1    { '{' X~ $_».&crosswalk X~ '}' }
    default   { $_».&crosswalk }
}

sub brace-expand($s) { crosswalk BraceExpansion.parse($s) }

#`[[
｢A{{a,b}1,2}｣
 0 => ｢A｣
 0 => ｢{{a,b}1,2}｣
  meta => ｢{{a,b}1,2}｣
   alts => ｢{a,b}1,2｣
    alt => ｢{a,b}1｣
     0 => ｢{a,b}｣
      meta => ｢{a,b}｣
       alts => ｢a,b｣
        alt => ｢a｣
         0 => ｢a｣
        alt => ｢b｣
         0 => ｢b｣
     0 => ｢1｣
    alt => ｢2｣
     0 => ｢2｣
]]

say crosswalk BraceExpansion.parse('A{{a,b}1,2}'); 
# have: (Aa1  b1 A2)
# want: (Aa1 Ab1 A2)
exit;

#And to test...

my @res; my $result;
sub bxtest(*@s) {
    for @s -> $s {
        $result ~= "$s\n";
        for brace-expand($s) {
            $result ~= "    " ~ $_ ~ "\n";
        }
    }
}

# 1st test OK, starts failing with 2nd (and 3rd)
bxtest Q:to/END/.lines;
    It{{em,alic}iz,erat}e{d,}, please.
    END
my $nextinp = Q:to/EOD/;
    ~/{Downloads,Pictures}/*.{jpg,gif,png}
    {,{,gotta have{ ,\, again\, }}more }cowbell!
    {}} some {\\{edge,edgy} }{ cases, here\\\}
    a{b{1,2}c
    a{1,2}b}c
    a{1,{2},3}b
    a{b{1,2}c{}}
    more{ darn{ cowbell,},}
    ab{c,d\,e{f,g\h},i\,j{k,l\,m}n,o\,p}qr
    {a,{\,b}c
    a{b,{{c}}
    {a{\}b,c}d
    {a,b{{1,2}e}f
    EOD

say $result; exit;

my $fail1 = q:to/EOD/;
It{{em,alic}iz,erat}e{d,}, please.
    Itemized, please.
    Itemize, please.
    Italicized, please.
    Italicize, please.
    Iterated, please.
    Iterate, please.
EOD

my $ref = q:to/END/;
~/{Downloads,Pictures}/*.{jpg,gif,png}
    ~/Downloads/*.jpg
    ~/Downloads/*.gif
    ~/Downloads/*.png
    ~/Pictures/*.jpg
    ~/Pictures/*.gif
    ~/Pictures/*.png

{,{,gotta have{ ,\, again\, }}more }cowbell!
    cowbell!
    more cowbell!
    gotta have more cowbell!
    gotta have\, again\, more cowbell!
END
my $nextref = q:to/EOD/;

{}} some {\\{edge,edgy} }{ cases, here\\\}
    {}} some {\\edge }{ cases, here\\\}
    {}} some {\\edgy }{ cases, here\\\}

a{b{1,2}c
    a{b1c
    a{b2c

a{1,2}b}c
    a1b}c
    a2b}c

a{1,{2},3}b
    a1b
    a{2}b
    a3b

a{b{1,2}c{}}
    a{b1c{}}
    a{b2c{}}

more{ darn{ cowbell,},}
    more darn cowbell
    more darn
    more

ab{c,d\,e{f,g\h},i\,j{k,l\,m}n,o\,p}qr
    abcqr
    abd\,efqr
    abd\,eg\hqr
    abi\,jknqr
    abi\,jl\,mnqr
    abo\,pqr

{a,{\,b}c
    {a,{\,b}c

a{b,{{c}}
    a{b,{{c}}

{a{\}b,c}d
    {a\}bd
    {acd

{a,b{{1,2}e}f
    {a,b{1e}f
    {a,b{2e}f
EOD

use Test;
is $result, $ref;

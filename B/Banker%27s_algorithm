#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Banker%27s_algorithm
#c# 2019-12-30 <RC, 2020-01-05 >RC, 2020-01-06 >RC
#m# MOAR: OK
#j# JVM:  OK
#n# see .0 for Hkdtam's original upload
#n# tried to follow sigil-less style, but @unfinished and @safe-sequence would not work that way

my @res;

# https://www.geeksforgeeks.org/program-bankers-algorithm-set-1-safety-algorithm/
# based on the Python3 solution by Shubham Singh(SHUBHAMSINGH10)

my @avail = <3 1 1 2>;                          # Available instances of resources
my @maxm  = <3 3 2 2>, <1 2 3 4>, <1 3 5 0>;    # Maximum resources that can be allocated to processes
my @allot = <1 2 2 1>, <1 0 3 3>, <1 2 1 0>;    # Resources allocated to processes

# Function to find the system is in safe state or not
sub isSafe(\work is copy, \maxm, \allot) {
    my \P          = allot.elems;     # Number of processes
    my \R          = work.elems;      # Number of resources
    my \need       = maxm »-« allot;  # the need matrix
    my @unfinished = True xx P;       # Mark all processes as unfinished
    my @safe-sequence;

    # While all processes are not finished or system is not in safe state
    my $count = 0;
    while $count < P {
        my $found = False;
        for ^P -> \p {
            # Check if process now can be finished
            if @unfinished[p] and all need[p] »≤« work {
                work »+=« allot[p;^R];   # Free the resources
                @res.push: 'available resources: ' ~ work;
                @safe-sequence.push: p;  # Add this process to safe sequence
                @unfinished[p] = False;  # Mark this process as finished
                $count += 1;
                $found = True
            }
        }
        # If we could not find a next process in safe sequence
        return False, "System is not in safe state." unless $found;
    }
    # If system is in safe state then safe sequence will be as below
    return True, "Safe sequence is: " ~ @safe-sequence
}

# Check if system is in a safe state
my ($safe-state,$status-message) = isSafe @avail, @maxm, @allot;
@res.push: "Safe state? $safe-state"; 
@res.push: "Message:    $status-message";

.say for @res;

my $ref = q:to/END/;
available resources: 4 3 3 3
available resources: 5 3 6 6
available resources: 6 5 7 6
Safe state? True
Message:    Safe sequence is: 0 1 2
END

use Test;
is @res.join("\n"), chomp $ref;

#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Map_range
#c# 2016-02-08 <RC
#m# MOAR: OK
#j#  JVM: OK

# Works with: rakudo version 2015-09-18
sub the_function(Range $a, Range $b, $s) {
  my ($a1, $a2) = $a.bounds;
  my ($b1, $b2) = $b.bounds;
  return $b1 + (($s-$a1) * ($b2-$b1) / ($a2-$a1));
}

my @res1;
for ^11 -> $x { say "$x maps to {the_function(0..10, -1..0, $x)}" }
for ^11 -> $x { push @res1, "$x maps to {the_function(0..10, -1..0, $x)}" }

# A more idiomatic way would be to return a closure that does the mapping without have to supply the ranges every time:

sub getmapper(Range $a, Range  $b) {
  my ($a1, $a2) = $a.bounds;
  my ($b1, $b2) = $b.bounds;
  return -> $s { $b1 + (($s-$a1) * ($b2-$b1) / ($a2-$a1)) }
}

my @res2;
my &mapper = getmapper(0 .. 10, -1 .. 0);
for ^11 -> $x {push @res2, "$x maps to &mapper($x)"}

my $ref = qq:to/END/;
0 maps to -1
1 maps to -0.9
2 maps to -0.8
3 maps to -0.7
4 maps to -0.6
5 maps to -0.5
6 maps to -0.4
7 maps to -0.3
8 maps to -0.2
9 maps to -0.1
10 maps to 0
END

use Test;
is (join "\n", @res1), chomp $ref;
is (join "\n", @res2), chomp $ref;

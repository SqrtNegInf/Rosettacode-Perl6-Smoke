#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Mertens_function
#c# 2020-01-25 <RC
#m# MOAR: OK
#j# JVM:  OK

use Prime::Factor;

sub μ (Int \n) {
    my @p = prime-factors(n);
    +@p == +Bag(@p).keys ?? +@p %% 2 ?? 1 !! -1 !! 0
}

my @mertens = lazy [\+] flat ' ', 1, (2..*).map: -> \n { μ(n) };

say my $result = "Mertens sequence - First 199 terms:\n" ~
    @mertens[^200]».fmt('%3s').rotor(20).join("\n")~
    "\n\nEquals zero "~ +@mertens[1..1000].grep( !* )~
    ' times between 1 and 1000'~ "\n\nCrosses zero "~
    +@mertens[1..1000].kv.grep( {!$^v and @mertens[$^k]} )~
    ' times between 1 and 1000';

my $ref = q:to/END/;
Mertens sequence - First 199 terms:
      1   0  -1  -1  -2  -1  -2  -2  -2  -1  -2  -2  -3  -2  -1  -1  -2  -2  -3
 -3  -2  -1  -2  -2  -2  -1  -1  -1  -2  -3  -4  -4  -3  -2  -1  -1  -2  -1   0
  0  -1  -2  -3  -3  -3  -2  -3  -3  -3  -3  -2  -2  -3  -3  -2  -2  -1   0  -1
 -1  -2  -1  -1  -1   0  -1  -2  -2  -1  -2  -3  -3  -4  -3  -3  -3  -2  -3  -4
 -4  -4  -3  -4  -4  -3  -2  -1  -1  -2  -2  -1  -1   0   1   2   2   1   1   1
  1   0  -1  -2  -2  -3  -2  -3  -3  -4  -5  -4  -4  -5  -6  -5  -5  -5  -4  -3
 -3  -3  -2  -1  -1  -1  -1  -2  -2  -1  -2  -3  -3  -2  -1  -1  -1  -2  -3  -4
 -4  -3  -2  -1  -1   0   1   1   1   0   0  -1  -1  -1  -2  -1  -1  -2  -1   0
  0   1   1   0   0  -1   0  -1  -1  -1  -2  -2  -2  -3  -4  -4  -4  -3  -2  -3
 -3  -4  -5  -4  -4  -3  -4  -3  -3  -3  -4  -5  -5  -6  -5  -6  -6  -7  -7  -8

Equals zero 92 times between 1 and 1000

Crosses zero 59 times between 1 and 1000
END

use Test;
is $result, chomp $ref;

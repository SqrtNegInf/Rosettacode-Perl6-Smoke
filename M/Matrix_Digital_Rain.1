#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Matrix_Digital_Rain
#t# interactive
#c# 2018-12-19 <RC
#m# MOAR: OK
#j# JVM:  OK

# Kind of cheap and cheesy, but what the heck... Probably will only work in POSIX compatible terminal. Runs until you hit ^C to exit.

signal(SIGINT).tap: { print "\e[H\e[J\e[?25h"; exit(0) }

my @codes = flat 'A' .. 'Z';

my ($rows,$cols) = qx/stty size/.words;

my @c = flat  "\e[38;2;255;255;255m", (255,250 ... 30).map({"\e[38;2;0;$_;0m"}),
              "\e[38;2;0;25;0m" xx 250;
my $sz = +@c;
my (@o, @s, @a);
print "\e[?25l";
init($rows, $cols);

loop {
     my ($r,$c) = qx/stty size/.words;
     init($r, $c) if $r != $rows or $c != $cols;
     print "\e[1;1H";
     print join '', (^@s).map: {
         @a[$_]<fg> = (@a[$_]<fg> + 1) % $sz;
         flat @c[@a[$_]<fg>], @a[$_]<bg>, @s[$_];
     }
     @s[(^@s).pick] = @codes.roll for ^30;
}

sub init ($r, $c) {
    @s = @codes.roll($r * $c);
    ($rows,$cols) = $r, $c;
    @a = {:bg("\e[48;5;232m")} xx +@s;
    my @o = (^@c).pick xx $cols;
    for ^$rows -> $row {
        for ^$cols -> $col {
            @a[$row * $cols + $col]<fg> = @o[$col];
        }
        @o = (^@o).map: {(@o[$_] - ($_ % 3)) % $sz};
    }
}

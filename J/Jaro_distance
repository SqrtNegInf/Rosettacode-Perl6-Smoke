#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Jaro_distance
#c# 2018-03-20 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# fiddle a little, more idiomatic

# Translation of: Perl

sub jaro ($s, $t) {
    return True if $s eq $t;

    my $s_len = + my @s = $s.comb;
    my $t_len = + my @t = $t.comb;
    my $match_distance = ($s_len max $t_len) div 2 - 1;
    my ($matches, @s_matches, @t_matches) = 0;  # arrays remain un-initialized

    for ^@s -> $i {
        my $start = 0 max $i - $match_distance;
        my $end   = $i + $match_distance min $t_len;

        for $start .. $end -> $j {
            next if     @t_matches[$j];
            next unless @s[$i] eq @t[$j];
            (@s_matches[$i], @t_matches[$j]) = (1, 1); 
            $matches++;
            last;
        }
    }
    return False if $matches == 0;

    my ($k, $transpositions) = (0, 0);
    for ^@s -> $i {
        next unless @s_matches[$i];
        until @t_matches[$k] { ++$k }
        @s[$i] eq @t[$k] or ++$transpositions;
        ++$k;
    }

    #3 R/ [+] $matches/$s_len, $matches/$t_len, ($matches - $transpositions/2)/$matches
    ( $matches/$s_len + $matches/$t_len + (($matches - $transpositions/2) / $matches) ) / 3 
}

my @res;
@res.push: sprintf("%f", jaro("MARTHA",    "MARHTA"));
@res.push: sprintf("%f", jaro("DIXON",     "DICKSONX"));
@res.push: sprintf("%f", jaro("JELLYFISH", "SMELLYFISH"));

my $ref = qq:to/END/;
0.944444
0.766667
0.896296
END

use Test;
is @res.join("\n"), chomp $ref;
